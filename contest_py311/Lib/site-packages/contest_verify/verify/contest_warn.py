"""
    Copyright Continental Corporation and subsidiaries. All rights reserved.

    :platform: Windows, Linux

    :synopsis:
        Script containing ConTest warning APIs
"""

# standard Python imports

# custom imports
from contest_verify.verify import verify_helper


# list to be filled in-case of any warning(s)
_WARNINGS = []


def _print_warning(expression=None, warning_str=str(), only_warn=False):
    """
    Function to log the warning

    :param str expression: actual value
    :param str warning_str: error to be printed
    :param bool only_warn: ``True`` if only warning logged. This failure is seen in case ``contest_warn.warn``
        is called. Default Value is ``False``
    """
    warning_str = verify_helper.add_pytest_caller_info(warning_str)
    if not only_warn:
        print("\n--> WARNING: In Evaluating Expression")
        print(f"      Expression : '{expression}'")
        print(f"--> WARNING Message : {warning_str}")
    else:
        print(f"\n--> Testcase Warning: {warning_str}")
    _WARNINGS.append(warning_str)


def warn(warning_info=str()):
    """
    Function to log a warning message

    .. important::
        Please note that this function will only log the warning, **NO FAILURE(s) or ERROR(s)** shall be reported.

        If there are only warnings logged or reported in a test case then that test shall be marked as **INCONCLUSIVE**.

    :param str warning_info: Warning to be logged

    Example::

        # import 'contest_warn' module
        from contest_verify.verify import contest_warn

        contest_warn.warn("This is my custom warning message")
    """
    _print_warning(warning_str=warning_info, only_warn=True)


def warn_if_eval_exp_failed(eval_exp=str(), warning_info=str()):
    """
    Function to log a warning message, in-case the evaluation of expression failed

    .. important::
        Please note that this function will only log the warning, **NO FAILURE(s) or ERROR(s)** shall be reported.

        If there are only warnings logged or reported in a test case then that test shall be marked as **INCONCLUSIVE**.

    :param str eval_exp: Expression to be evaluated
    :param str warning_info: Warning to be logged, if evaluation of ``eval_exp`` failed

    .. note::
        Please note that the ``eval_exp`` shall be given as a string which shall result in a boolean result either
        ``True`` or ``False`` for proper functioning of this API

    Example::

        # import 'contest_warn' module
        from contest_verify.verify import contest_warn

        # log warning if the two numbers are not equal
        contest_warn.warn_if_eval_exp_failed(eval_exp="1 == 2", warning_info="1 != 2, oops math is broken")
        # log warning if the existence of a number is not found in a list
        contest_warn.warn_if_eval_exp_failed(eval_exp="1 in [2, 3, 4]", warning_info="1 is not in [2, 3, 4]")

    Example With Variables::

        # log warning by evaluating an expression created via variables
        num_1 = 1
        num_2 = 2
        check_list = [2, 3, 4]
        evaluate_expression_nums = "{} == {}".format(num_1, num_2)
        evaluate_expression_list = "{} in {}".format(num_1, check_list)
        warning_nums = "{} != {}, oops math is broken".format(num_1, num_2)
        warning_list = "{} is not in {}".format(num_1, check_list)

        contest_warn.warn_if_eval_exp_failed(eval_exp=evaluate_expression_nums, warning_info=warning_nums)
        contest_warn.warn_if_eval_exp_failed(eval_exp=evaluate_expression_list, warning_info=warning_list)
    """
    # it's ok to use eval as we need to evaluate an expression given by user of this function
    # pylint: disable=eval-used
    if not eval(eval_exp):
        _print_warning(expression=eval_exp, warning_str=warning_info, only_warn=False)
