"""
    Copyright Continental Corporation and subsidiaries. All rights reserved.
    :platform: Windows, Linux
    :synopsis:
        This file contains all the variables which are used globally within the Framework.
"""

# disable=deprecated-module for using distutils.version
# pylint: disable=deprecated-module
import os
import sys
import platform
from distutils.version import LooseVersion
from enum import Enum
from typing import Any, Union
from contest_tool.uim.uim import get_all_available_versions

from contest_tool import __PACKAGE_VERSION


THIS_FILE = os.path.dirname(os.path.realpath(__file__))

# please change the version and year also in 'ConTest\NOTICE_FILE.txt'
LATEST_VERSION = __PACKAGE_VERSION if __PACKAGE_VERSION else "0.0.0"
BASE_PYTHON_VERSION = platform.python_version()
PYTHON_PATH = sys.executable
PYTHON_BIT_ARCH = platform.architecture()[0]

FW_NAME = "ConTest"
# version string to appear in user documentation i.e. extended with 'v' and 'pre-release'
CONTEST_VERSION = "v" + LATEST_VERSION
# converting 'VERSION' string to tuple for comparing it with tuple of release version from artifactory
LOCAL_VERSION_TUPLE = tuple(map(int, (LATEST_VERSION.split("."))))
TEST_ENVIRONMENT = FW_NAME + "_" + CONTEST_VERSION
URL = "https://eu.artifactory.conti.de/artifactory/c_adas_astt_generic_prod_eu_l/ConTest/"
# this SHOULD match with the git release tag otherwise the doc links WILL NOT WORK !!!
DOC_VERSION = "v" + LATEST_VERSION
# GUI window title
GUI_WINDOW_TITLE = FW_NAME + " " + CONTEST_VERSION

# list containing run mode names
AUTO_MODE = "auto"
# Auto mode with GUI option enabled
AUTO_GUI_MODE = "auto_gui"
MANUAL_MODE = "manual"
RUN_MODES = [AUTO_MODE, MANUAL_MODE, AUTO_GUI_MODE]
UIM_CLI_ARGS = ["latest", "none"]

# variables storing log and logo icon paths
LOGO_ICON = os.path.join(THIS_FILE, "gui", "gui_images", "logo_icon.png")
LOGO = os.path.join(THIS_FILE, "gui", "gui_images", "logo.png")
HTML_COPY_LINK = os.path.join(THIS_FILE, "gui", "gui_images", "html_report_copy_link_icon.png")
PASS_ICON = os.path.join(THIS_FILE, "gui", "gui_images", "pass_icon.png")
INCONCLUSIVE_ICON = os.path.join(THIS_FILE, "gui", "gui_images", "inconclusive_icon.png")
FAIL_ICON = os.path.join(THIS_FILE, "gui", "gui_images", "fail_icon.png")
SKIP_ICON = os.path.join(THIS_FILE, "gui", "gui_images", "skip_icon.png")
HTML_TEMPLATE_PATH = os.path.join(THIS_FILE, "data", "html_template")

# release main feature
RELEASE_MAIN_POINTS = (
    "<h2>‚ö° Features/Changes</h2><br/>"
    "&nbsp;&nbsp;<p style='font-size:16px'>üêç <b>ConTest Tool Python Wheel</b></p><br/>"
    "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Now ConTest tool is available as üêç Python wheel package üéâ<br/>"
    "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; You can install ConTest tool as Python wheel package via pip.<br/><br/>"
    "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; üëâ <i>pip install contest_tool</i><br/><br/>"
    "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; üëâ Check <b>Installation</b> link below for more details.</a><br/>"
    "&nbsp;&nbsp;<p style='font-size:16px'>üìë <b>New Documentation Locations</b></p><br/>"
    "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The documentation for ConTest is now live on GitHub Pages<br/>"
    "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; üëâÔ∏è Ô∏è Check <b>Links</b> below and bookmark ‚≠ê them for easy access.</a>"
    "<br/><br/>"
)

# exit codes
SUCCESS = 0
# if any general exception occurred
GENERAL_ERR = 1
# if any one test case failed
TEST_FAILURE = 2
# if any one or more test case is unstable and no other failure happened
INCONCLUSIVE = 3
# variable to store the state (true/false) of stop button on contest gui
STOP_STATE_GUI = False
# variable to store the values of user variables passed by cli
USER_CLI_VARS = {}
# flag holding the value if ui is running or tool started without ui i.e. auto mode
__UI_RUNNING = False
# flag holding value for contest_tool started or not
__TOOL_STARTED = False
__INITIAL_CONTEST_TOOL_WHEEL_VERSION = "0.0.1"
__VERSION_UPDATE_INFO = ""


class TestVerdicts(Enum):
    """
    Class for saving values of different test verdicts currently supported for test case functions

    Note: New verdicts can be added here
    """

    UNKNOWN = 0
    PASS = 1
    FAIL = 2
    INCONCLUSIVE = 3
    SKIP = 4
    BLOCKED = 5
    NONE = 6
    ERROR = 7


class ValidFilter(Enum):
    """
    A list of valid filter to be used for test case filtering.
    """

    # Filter for tags
    TAG = "tag"


class ValidFilterLogicOperators(Enum):
    """
    A list of valid filter logic operator to be used for test case filtering.
    """

    # Logic operators
    AND = "and"
    OR = "or"


def check_latest_version() -> Union[tuple[Any, tuple[int, ...]], tuple[None, None]]:
    """
    This method checks the latest available version of ConTest tool wheel package from artifactory

    :returns: Latest available version string and version string in tuple form
    :rtype: tuple[Any, tuple[int, ...]] | tuple[None, None]
    """
    latest_version_str = None
    latest_version_tuple = None
    try:
        status, versions = get_all_available_versions(pkg_name="contest_tool")
        if status:
            filtered_versions = [
                version
                for version in versions
                if LooseVersion(version) >= LooseVersion(__INITIAL_CONTEST_TOOL_WHEEL_VERSION)
            ]
            if filtered_versions:
                latest_version_str = max(filtered_versions, key=lambda x: tuple(map(int, (x.split(".")))))
                latest_version_tuple = tuple(map(int, (latest_version_str.split("."))))
                return latest_version_str, latest_version_tuple
        return None, None
    # ok to catch general exceptions
    # pylint: disable=broad-exception-caught
    except Exception:
        return latest_version_str, latest_version_tuple
