# flake8: noqa

from gui import resource_rc
from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setWindowModality(QtCore.Qt.ApplicationModal)
        MainWindow.setEnabled(True)
        MainWindow.resize(1186, 882)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMaximumSize(QtCore.QSize(16777215, 16777215))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 170))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.NoBrush)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 170))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.NoBrush)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 170))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.NoBrush)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.PlaceholderText, brush)
        MainWindow.setPalette(palette)
        MainWindow.setAcceptDrops(False)
        MainWindow.setWindowTitle("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/resources/gui_images/logo_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setLayoutDirection(QtCore.Qt.LeftToRight)
        MainWindow.setIconSize(QtCore.QSize(100, 100))
        MainWindow.setDocumentMode(False)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_9 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_9.setObjectName("gridLayout_9")
        self.gridLayout_8 = QtWidgets.QGridLayout()
        self.gridLayout_8.setObjectName("gridLayout_8")
        self.filter_groupbox = QtWidgets.QGroupBox(self.centralwidget)
        self.filter_groupbox.setMinimumSize(QtCore.QSize(140, 100))
        self.filter_groupbox.setMaximumSize(QtCore.QSize(180, 100))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(True)
        font.setWeight(75)
        self.filter_groupbox.setFont(font)
        self.filter_groupbox.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.filter_groupbox.setAutoFillBackground(False)
        self.filter_groupbox.setFlat(False)
        self.filter_groupbox.setCheckable(False)
        self.filter_groupbox.setObjectName("filter_groupbox")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.filter_groupbox)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.stage_select_combobox = QtWidgets.QComboBox(self.filter_groupbox)
        self.stage_select_combobox.setMinimumSize(QtCore.QSize(155, 0))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.stage_select_combobox.setFont(font)
        self.stage_select_combobox.setEditable(False)
        self.stage_select_combobox.setInsertPolicy(QtWidgets.QComboBox.InsertAlphabetically)
        self.stage_select_combobox.setObjectName("stage_select_combobox")
        self.gridLayout_4.addWidget(self.stage_select_combobox, 0, 0, 1, 1)
        self.cb_and_tags_filter = QtWidgets.QCheckBox(self.filter_groupbox)
        self.cb_and_tags_filter.setObjectName("cb_and_tags_filter")
        self.gridLayout_4.addWidget(self.cb_and_tags_filter, 1, 3, 1, 1)
        self.cb_all_tags = QtWidgets.QCheckBox(self.filter_groupbox)
        self.cb_all_tags.setMaximumSize(QtCore.QSize(65, 16777215))
        self.cb_all_tags.setObjectName("cb_all_tags")
        self.gridLayout_4.addWidget(self.cb_all_tags, 1, 0, 1, 1)
        self.cb_or_tags_filter = QtWidgets.QCheckBox(self.filter_groupbox)
        self.cb_or_tags_filter.setMaximumSize(QtCore.QSize(80, 16777215))
        self.cb_or_tags_filter.setObjectName("cb_or_tags_filter")
        self.gridLayout_4.addWidget(self.cb_or_tags_filter, 1, 1, 1, 1)
        self.gridLayout_8.addWidget(self.filter_groupbox, 0, 0, 1, 1)
        self.loopstorun_groupbox = QtWidgets.QGroupBox(self.centralwidget)
        self.loopstorun_groupbox.setMinimumSize(QtCore.QSize(155, 100))
        self.loopstorun_groupbox.setMaximumSize(QtCore.QSize(200, 100))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(True)
        font.setWeight(75)
        self.loopstorun_groupbox.setFont(font)
        self.loopstorun_groupbox.setObjectName("loopstorun_groupbox")
        self.gridLayout_7 = QtWidgets.QGridLayout(self.loopstorun_groupbox)
        self.gridLayout_7.setObjectName("gridLayout_7")
        self.loops_to_run_spinbox = QtWidgets.QSpinBox(self.loopstorun_groupbox)
        self.loops_to_run_spinbox.setMaximumSize(QtCore.QSize(160, 16777215))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.loops_to_run_spinbox.setFont(font)
        self.loops_to_run_spinbox.setMinimum(1)
        self.loops_to_run_spinbox.setMaximum(999)
        self.loops_to_run_spinbox.setObjectName("loops_to_run_spinbox")
        self.gridLayout_7.addWidget(self.loops_to_run_spinbox, 0, 1, 1, 1)
        self.gridLayout_8.addWidget(self.loopstorun_groupbox, 0, 1, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_8.addItem(spacerItem, 0, 2, 1, 1)
        self.execution_parameters_groupbox = QtWidgets.QGroupBox(self.centralwidget)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.execution_parameters_groupbox.setFont(font)
        self.execution_parameters_groupbox.setObjectName("execution_parameters_groupbox")
        self.gridLayout_10 = QtWidgets.QGridLayout(self.execution_parameters_groupbox)
        self.gridLayout_10.setObjectName("gridLayout_10")
        self.run_only_failed = QtWidgets.QCheckBox(self.execution_parameters_groupbox)
        self.run_only_failed.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.run_only_failed.sizePolicy().hasHeightForWidth())
        self.run_only_failed.setSizePolicy(sizePolicy)
        self.run_only_failed.setMinimumSize(QtCore.QSize(135, 20))
        self.run_only_failed.setMaximumSize(QtCore.QSize(135, 20))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.run_only_failed.setFont(font)
        self.run_only_failed.setObjectName("run_only_failed")
        self.gridLayout_10.addWidget(self.run_only_failed, 0, 0, 1, 1)
        self.random_execution = QtWidgets.QCheckBox(self.execution_parameters_groupbox)
        self.random_execution.setEnabled(False)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.random_execution.setFont(font)
        self.random_execution.setObjectName("random_execution")
        self.gridLayout_10.addWidget(self.random_execution, 1, 0, 1, 1)
        self.cb_run_unselected = QtWidgets.QCheckBox(self.execution_parameters_groupbox)
        self.cb_run_unselected.setEnabled(False)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.cb_run_unselected.setFont(font)
        self.cb_run_unselected.setObjectName("cb_run_unselected")
        self.gridLayout_10.addWidget(self.cb_run_unselected, 0, 1, 1, 1)
        self.gridLayout_8.addWidget(self.execution_parameters_groupbox, 0, 3, 1, 1)
        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.stop_pushbutton = QtWidgets.QPushButton(self.centralwidget)
        self.stop_pushbutton.setMinimumSize(QtCore.QSize(40, 40))
        self.stop_pushbutton.setMaximumSize(QtCore.QSize(40, 40))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.stop_pushbutton.setFont(font)
        self.stop_pushbutton.setStyleSheet("border: none;\n"
"background-color: none;")
        self.stop_pushbutton.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/resources/gui_images/stop_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.stop_pushbutton.setIcon(icon1)
        self.stop_pushbutton.setIconSize(QtCore.QSize(40, 40))
        self.stop_pushbutton.setObjectName("stop_pushbutton")
        self.gridLayout_2.addWidget(self.stop_pushbutton, 0, 2, 1, 1)
        self.runtest_pushbutton = QtWidgets.QPushButton(self.centralwidget)
        self.runtest_pushbutton.setMinimumSize(QtCore.QSize(40, 40))
        self.runtest_pushbutton.setMaximumSize(QtCore.QSize(40, 40))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.runtest_pushbutton.setFont(font)
        self.runtest_pushbutton.setAutoFillBackground(False)
        self.runtest_pushbutton.setStyleSheet("border: none;\n"
"background-color: none;")
        self.runtest_pushbutton.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/resources/gui_images/run_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.runtest_pushbutton.setIcon(icon2)
        self.runtest_pushbutton.setIconSize(QtCore.QSize(35, 35))
        self.runtest_pushbutton.setCheckable(False)
        self.runtest_pushbutton.setAutoDefault(False)
        self.runtest_pushbutton.setFlat(False)
        self.runtest_pushbutton.setObjectName("runtest_pushbutton")
        self.gridLayout_2.addWidget(self.runtest_pushbutton, 0, 0, 1, 1)
        self.reload_pushbutton = QtWidgets.QPushButton(self.centralwidget)
        self.reload_pushbutton.setMinimumSize(QtCore.QSize(40, 40))
        self.reload_pushbutton.setMaximumSize(QtCore.QSize(40, 40))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.reload_pushbutton.setFont(font)
        self.reload_pushbutton.setStyleSheet("border: none;\n"
"background-color: none;")
        self.reload_pushbutton.setInputMethodHints(QtCore.Qt.ImhNone)
        self.reload_pushbutton.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/resources/gui_images/reload_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.reload_pushbutton.setIcon(icon3)
        self.reload_pushbutton.setIconSize(QtCore.QSize(40, 40))
        self.reload_pushbutton.setObjectName("reload_pushbutton")
        self.gridLayout_2.addWidget(self.reload_pushbutton, 0, 1, 1, 1)
        self.gridLayout_8.addLayout(self.gridLayout_2, 0, 4, 1, 1)
        self.gridLayout_9.addLayout(self.gridLayout_8, 0, 0, 1, 1)
        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.gridLayout_9.addWidget(self.line_2, 1, 0, 1, 1)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.select_tests_tabwidget = QtWidgets.QTabWidget(self.centralwidget)
        self.select_tests_tabwidget.setEnabled(True)
        self.select_tests_tabwidget.setMinimumSize(QtCore.QSize(0, 100))
        font = QtGui.QFont()
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.select_tests_tabwidget.setFont(font)
        self.select_tests_tabwidget.setAutoFillBackground(False)
        self.select_tests_tabwidget.setTabPosition(QtWidgets.QTabWidget.North)
        self.select_tests_tabwidget.setTabShape(QtWidgets.QTabWidget.Triangular)
        self.select_tests_tabwidget.setElideMode(QtCore.Qt.ElideLeft)
        self.select_tests_tabwidget.setUsesScrollButtons(True)
        self.select_tests_tabwidget.setDocumentMode(False)
        self.select_tests_tabwidget.setTabsClosable(False)
        self.select_tests_tabwidget.setMovable(True)
        self.select_tests_tabwidget.setTabBarAutoHide(False)
        self.select_tests_tabwidget.setObjectName("select_tests_tabwidget")
        self.select_and_run_tab = QtWidgets.QWidget()
        self.select_and_run_tab.setObjectName("select_and_run_tab")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.select_and_run_tab)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.searchbar_linedit = QtWidgets.QLineEdit(self.select_and_run_tab)
        self.searchbar_linedit.setMinimumSize(QtCore.QSize(500, 25))
        self.searchbar_linedit.setMaximumSize(QtCore.QSize(16777215, 30))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.searchbar_linedit.setFont(font)
        self.searchbar_linedit.setText("")
        self.searchbar_linedit.setObjectName("searchbar_linedit")
        self.gridLayout_3.addWidget(self.searchbar_linedit, 0, 1, 1, 1)
        self.expand_tree_pushbutton = QtWidgets.QPushButton(self.select_and_run_tab)
        self.expand_tree_pushbutton.setMinimumSize(QtCore.QSize(95, 25))
        self.expand_tree_pushbutton.setMaximumSize(QtCore.QSize(100, 30))
        self.expand_tree_pushbutton.setObjectName("expand_tree_pushbutton")
        self.gridLayout_3.addWidget(self.expand_tree_pushbutton, 0, 0, 1, 1)
        self.main_treeview = QtWidgets.QTreeView(self.select_and_run_tab)
        self.main_treeview.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(9)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.main_treeview.sizePolicy().hasHeightForWidth())
        self.main_treeview.setSizePolicy(sizePolicy)
        self.main_treeview.setMinimumSize(QtCore.QSize(500, 420))
        self.main_treeview.setSizeIncrement(QtCore.QSize(33, 5))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setKerning(True)
        self.main_treeview.setFont(font)
        self.main_treeview.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        self.main_treeview.setToolTipDuration(4)
        self.main_treeview.setAutoFillBackground(False)
        self.main_treeview.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAsNeeded)
        self.main_treeview.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAsNeeded)
        self.main_treeview.setAutoScroll(False)
        self.main_treeview.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.main_treeview.setTabKeyNavigation(False)
        self.main_treeview.setProperty("showDropIndicator", True)
        self.main_treeview.setAlternatingRowColors(False)
        self.main_treeview.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
        self.main_treeview.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.main_treeview.setTextElideMode(QtCore.Qt.ElideRight)
        self.main_treeview.setVerticalScrollMode(QtWidgets.QAbstractItemView.ScrollPerPixel)
        self.main_treeview.setHorizontalScrollMode(QtWidgets.QAbstractItemView.ScrollPerPixel)
        self.main_treeview.setItemsExpandable(True)
        self.main_treeview.setSortingEnabled(False)
        self.main_treeview.setWordWrap(False)
        self.main_treeview.setHeaderHidden(False)
        self.main_treeview.setExpandsOnDoubleClick(True)
        self.main_treeview.setObjectName("main_treeview")
        self.main_treeview.header().setCascadingSectionResizes(True)
        self.main_treeview.header().setHighlightSections(True)
        self.main_treeview.header().setSortIndicatorShown(True)
        self.main_treeview.header().setStretchLastSection(False)
        self.gridLayout_3.addWidget(self.main_treeview, 1, 0, 1, 2)
        self.select_tests_tabwidget.addTab(self.select_and_run_tab, "")
        self.tab_outputs = QtWidgets.QWidget()
        self.tab_outputs.setObjectName("tab_outputs")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.tab_outputs)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.groupBox = QtWidgets.QGroupBox(self.tab_outputs)
        self.groupBox.setMinimumSize(QtCore.QSize(1000, 0))
        self.groupBox.setMaximumSize(QtCore.QSize(10000, 16777215))
        self.groupBox.setObjectName("groupBox")
        self.gridLayout_6 = QtWidgets.QGridLayout(self.groupBox)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.splitter = QtWidgets.QSplitter(self.groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.splitter.sizePolicy().hasHeightForWidth())
        self.splitter.setSizePolicy(sizePolicy)
        self.splitter.setMinimumSize(QtCore.QSize(980, 270))
        self.splitter.setOrientation(QtCore.Qt.Horizontal)
        self.splitter.setObjectName("splitter")
        self.output_tablewidget = QtWidgets.QTableWidget(self.splitter)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.output_tablewidget.sizePolicy().hasHeightForWidth())
        self.output_tablewidget.setSizePolicy(sizePolicy)
        self.output_tablewidget.setMinimumSize(QtCore.QSize(300, 250))
        self.output_tablewidget.setMaximumSize(QtCore.QSize(10000, 16777215))
        font = QtGui.QFont()
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.output_tablewidget.setFont(font)
        self.output_tablewidget.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        self.output_tablewidget.setAutoFillBackground(False)
        self.output_tablewidget.setStyleSheet("")
        self.output_tablewidget.setAutoScroll(True)
        self.output_tablewidget.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.output_tablewidget.setAlternatingRowColors(False)
        self.output_tablewidget.setTextElideMode(QtCore.Qt.ElideRight)
        self.output_tablewidget.setVerticalScrollMode(QtWidgets.QAbstractItemView.ScrollPerPixel)
        self.output_tablewidget.setHorizontalScrollMode(QtWidgets.QAbstractItemView.ScrollPerPixel)
        self.output_tablewidget.setWordWrap(False)
        self.output_tablewidget.setCornerButtonEnabled(False)
        self.output_tablewidget.setObjectName("output_tablewidget")
        self.output_tablewidget.setColumnCount(2)
        self.output_tablewidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.output_tablewidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.output_tablewidget.setHorizontalHeaderItem(1, item)
        self.output_tablewidget.horizontalHeader().setCascadingSectionResizes(True)
        self.output_tablewidget.horizontalHeader().setDefaultSectionSize(250)
        self.output_tablewidget.horizontalHeader().setHighlightSections(False)
        self.output_tablewidget.horizontalHeader().setStretchLastSection(True)
        self.output_tablewidget.verticalHeader().setStretchLastSection(False)
        self.console_group_box = QtWidgets.QGroupBox(self.splitter)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(2)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.console_group_box.sizePolicy().hasHeightForWidth())
        self.console_group_box.setSizePolicy(sizePolicy)
        self.console_group_box.setObjectName("console_group_box")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.console_group_box)
        self.verticalLayout.setObjectName("verticalLayout")
        self.console_searchbar_linedit = QtWidgets.QLineEdit(self.console_group_box)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.console_searchbar_linedit.sizePolicy().hasHeightForWidth())
        self.console_searchbar_linedit.setSizePolicy(sizePolicy)
        self.console_searchbar_linedit.setMinimumSize(QtCore.QSize(0, 30))
        self.console_searchbar_linedit.setMaximumSize(QtCore.QSize(16777215, 30))
        self.console_searchbar_linedit.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(33, 33, 33);")
        self.console_searchbar_linedit.setObjectName("console_searchbar_linedit")
        self.verticalLayout.addWidget(self.console_searchbar_linedit)
        self.output_console_textedit = QtWidgets.QTextEdit(self.console_group_box)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.output_console_textedit.sizePolicy().hasHeightForWidth())
        self.output_console_textedit.setSizePolicy(sizePolicy)
        self.output_console_textedit.setMinimumSize(QtCore.QSize(300, 225))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.output_console_textedit.setFont(font)
        self.output_console_textedit.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(33, 33, 33);")
        self.output_console_textedit.setDocumentTitle("")
        self.output_console_textedit.setLineWrapMode(QtWidgets.QTextEdit.WidgetWidth)
        self.output_console_textedit.setReadOnly(True)
        self.output_console_textedit.setObjectName("output_console_textedit")
        self.verticalLayout.addWidget(self.output_console_textedit)
        self.verticalLayout.setStretch(1, 1)
        self.gridLayout_6.addWidget(self.splitter, 0, 0, 1, 1)
        self.gridLayout_5.addWidget(self.groupBox, 0, 1, 1, 1)
        self.tests_progressbar = QtWidgets.QProgressBar(self.tab_outputs)
        self.tests_progressbar.setMinimumSize(QtCore.QSize(250, 24))
        self.tests_progressbar.setAcceptDrops(False)
        self.tests_progressbar.setAutoFillBackground(True)
        self.tests_progressbar.setProperty("value", 0)
        self.tests_progressbar.setOrientation(QtCore.Qt.Horizontal)
        self.tests_progressbar.setObjectName("tests_progressbar")
        self.gridLayout_5.addWidget(self.tests_progressbar, 1, 1, 1, 1)
        self.select_tests_tabwidget.addTab(self.tab_outputs, "")
        self.verticalLayout_2.addWidget(self.select_tests_tabwidget)
        self.gridLayout_9.addLayout(self.verticalLayout_2, 2, 0, 1, 1)
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.gridLayout_9.addWidget(self.line, 3, 0, 1, 1)
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_9.setContentsMargins(-1, 0, -1, 0)
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.dark_mode_label = QtWidgets.QLabel(self.centralwidget)
        self.dark_mode_label.setObjectName("dark_mode_label")
        self.horizontalLayout_9.addWidget(self.dark_mode_label)
        self.slider_dark_mode = QtWidgets.QSlider(self.centralwidget)
        self.slider_dark_mode.setMinimumSize(QtCore.QSize(26, 22))
        self.slider_dark_mode.setMaximumSize(QtCore.QSize(26, 22))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.slider_dark_mode.setFont(font)
        self.slider_dark_mode.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.slider_dark_mode.setMouseTracking(True)
        self.slider_dark_mode.setAutoFillBackground(False)
        self.slider_dark_mode.setStyleSheet("QSlider::groove:horizontal {\n"
"border: 1px solid #bbb;\n"
"background: qlineargradient(x1: 0.5, y1: 0.5, x2: 0.45, y2: 0.5, stop: 0 white, stop: 1 #5d86f7);\n"
"height: 13px;\n"
"border-radius: 6px;\n"
"margin-top: -3px;\n"
"margin-bottom: -3px;\n"
"}\n"
"QSlider::handle:horizontal {\n"
"background: #eee;\n"
"border: 1.2px solid #777;\n"
"height: 12px;\n"
"width: 12px;\n"
"border-radius: 7px;\n"
"margin-top: -2px;\n"
"margin-bottom: -2px;\n"
"}\n"
"QSlider::handle:horizontal:hover {\n"
"background: #ddd;\n"
"border: 1px solid #444;\n"
"border-radius: 6px;\n"
"}")
        self.slider_dark_mode.setMaximum(1)
        self.slider_dark_mode.setSingleStep(1)
        self.slider_dark_mode.setPageStep(1)
        self.slider_dark_mode.setProperty("value", 0)
        self.slider_dark_mode.setSliderPosition(0)
        self.slider_dark_mode.setTracking(True)
        self.slider_dark_mode.setOrientation(QtCore.Qt.Horizontal)
        self.slider_dark_mode.setInvertedAppearance(False)
        self.slider_dark_mode.setInvertedControls(False)
        self.slider_dark_mode.setTickPosition(QtWidgets.QSlider.NoTicks)
        self.slider_dark_mode.setTickInterval(1)
        self.slider_dark_mode.setObjectName("slider_dark_mode")
        self.horizontalLayout_9.addWidget(self.slider_dark_mode)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_9.addItem(spacerItem1)
        self.line_4 = QtWidgets.QFrame(self.centralwidget)
        self.line_4.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_4.setObjectName("line_4")
        self.horizontalLayout_9.addWidget(self.line_4)
        self.total_label_2 = QtWidgets.QLabel(self.centralwidget)
        self.total_label_2.setMaximumSize(QtCore.QSize(120, 40))
        font = QtGui.QFont()
        font.setPointSize(7)
        font.setBold(False)
        font.setWeight(50)
        self.total_label_2.setFont(font)
        self.total_label_2.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.total_label_2.setObjectName("total_label_2")
        self.horizontalLayout_9.addWidget(self.total_label_2)
        self.total_running_lcd = QtWidgets.QLCDNumber(self.centralwidget)
        self.total_running_lcd.setMinimumSize(QtCore.QSize(65, 23))
        self.total_running_lcd.setMaximumSize(QtCore.QSize(65, 24))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.total_running_lcd.setFont(font)
        self.total_running_lcd.setStyleSheet("QFrame {\n"
"    border: 1px solid #495971;\n"
" }")
        self.total_running_lcd.setFrameShadow(QtWidgets.QFrame.Plain)
        self.total_running_lcd.setSegmentStyle(QtWidgets.QLCDNumber.Flat)
        self.total_running_lcd.setObjectName("total_running_lcd")
        self.horizontalLayout_9.addWidget(self.total_running_lcd)
        self.passed_label = QtWidgets.QLabel(self.centralwidget)
        self.passed_label.setMaximumSize(QtCore.QSize(60, 40))
        font = QtGui.QFont()
        font.setPointSize(7)
        font.setBold(False)
        font.setWeight(50)
        self.passed_label.setFont(font)
        self.passed_label.setObjectName("passed_label")
        self.horizontalLayout_9.addWidget(self.passed_label)
        self.passed_running_lcd = QtWidgets.QLCDNumber(self.centralwidget)
        self.passed_running_lcd.setMinimumSize(QtCore.QSize(65, 23))
        self.passed_running_lcd.setMaximumSize(QtCore.QSize(65, 24))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.passed_running_lcd.setFont(font)
        self.passed_running_lcd.setStyleSheet("QFrame {\n"
"    border: 1px solid #495971;\n"
" }")
        self.passed_running_lcd.setFrameShadow(QtWidgets.QFrame.Plain)
        self.passed_running_lcd.setSegmentStyle(QtWidgets.QLCDNumber.Flat)
        self.passed_running_lcd.setObjectName("passed_running_lcd")
        self.horizontalLayout_9.addWidget(self.passed_running_lcd)
        self.inconl_label = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(7)
        self.inconl_label.setFont(font)
        self.inconl_label.setObjectName("inconl_label")
        self.horizontalLayout_9.addWidget(self.inconl_label)
        self.inconclusive_running_lcd = QtWidgets.QLCDNumber(self.centralwidget)
        self.inconclusive_running_lcd.setMinimumSize(QtCore.QSize(65, 23))
        self.inconclusive_running_lcd.setMaximumSize(QtCore.QSize(65, 24))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.inconclusive_running_lcd.setFont(font)
        self.inconclusive_running_lcd.setStyleSheet("QFrame {\n"
"    border: 1px solid #495971;\n"
" }")
        self.inconclusive_running_lcd.setFrameShadow(QtWidgets.QFrame.Plain)
        self.inconclusive_running_lcd.setSegmentStyle(QtWidgets.QLCDNumber.Flat)
        self.inconclusive_running_lcd.setObjectName("inconclusive_running_lcd")
        self.horizontalLayout_9.addWidget(self.inconclusive_running_lcd)
        self.skip_label = QtWidgets.QLabel(self.centralwidget)
        self.skip_label.setObjectName("skip_label")
        self.horizontalLayout_9.addWidget(self.skip_label)
        self.skip_running_lcd = QtWidgets.QLCDNumber(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.skip_running_lcd.setFont(font)
        self.skip_running_lcd.setStyleSheet("QFrame {\n"
"    border: 1px solid #495971;\n"
" }")
        self.skip_running_lcd.setFrameShadow(QtWidgets.QFrame.Plain)
        self.skip_running_lcd.setSegmentStyle(QtWidgets.QLCDNumber.Flat)
        self.skip_running_lcd.setObjectName("skip_running_lcd")
        self.horizontalLayout_9.addWidget(self.skip_running_lcd)
        self.failed_label = QtWidgets.QLabel(self.centralwidget)
        self.failed_label.setMaximumSize(QtCore.QSize(60, 40))
        font = QtGui.QFont()
        font.setPointSize(7)
        font.setBold(False)
        font.setWeight(50)
        self.failed_label.setFont(font)
        self.failed_label.setObjectName("failed_label")
        self.horizontalLayout_9.addWidget(self.failed_label)
        self.failed_running_lcd = QtWidgets.QLCDNumber(self.centralwidget)
        self.failed_running_lcd.setMinimumSize(QtCore.QSize(65, 23))
        self.failed_running_lcd.setMaximumSize(QtCore.QSize(65, 24))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.failed_running_lcd.setFont(font)
        self.failed_running_lcd.setStyleSheet("QFrame {\n"
"    border: 1px solid #495971;\n"
" }")
        self.failed_running_lcd.setFrameShadow(QtWidgets.QFrame.Plain)
        self.failed_running_lcd.setSegmentStyle(QtWidgets.QLCDNumber.Flat)
        self.failed_running_lcd.setObjectName("failed_running_lcd")
        self.horizontalLayout_9.addWidget(self.failed_running_lcd)
        self.exe_time_label = QtWidgets.QLabel(self.centralwidget)
        self.exe_time_label.setMaximumSize(QtCore.QSize(100, 40))
        font = QtGui.QFont()
        font.setPointSize(7)
        font.setBold(False)
        font.setWeight(50)
        self.exe_time_label.setFont(font)
        self.exe_time_label.setObjectName("exe_time_label")
        self.horizontalLayout_9.addWidget(self.exe_time_label)
        self.exe_time_lcd = QtWidgets.QLCDNumber(self.centralwidget)
        self.exe_time_lcd.setMinimumSize(QtCore.QSize(65, 23))
        self.exe_time_lcd.setMaximumSize(QtCore.QSize(65, 24))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.exe_time_lcd.setFont(font)
        self.exe_time_lcd.setStyleSheet("QFrame {\n"
"    border: 1px solid #495971;\n"
" }")
        self.exe_time_lcd.setFrameShadow(QtWidgets.QFrame.Plain)
        self.exe_time_lcd.setSegmentStyle(QtWidgets.QLCDNumber.Flat)
        self.exe_time_lcd.setProperty("intValue", 0)
        self.exe_time_lcd.setObjectName("exe_time_lcd")
        self.horizontalLayout_9.addWidget(self.exe_time_lcd)
        self.line_3 = QtWidgets.QFrame(self.centralwidget)
        self.line_3.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.horizontalLayout_9.addWidget(self.line_3)
        self.selected_label = QtWidgets.QLabel(self.centralwidget)
        self.selected_label.setMaximumSize(QtCore.QSize(60, 40))
        font = QtGui.QFont()
        font.setPointSize(7)
        font.setBold(False)
        font.setWeight(50)
        self.selected_label.setFont(font)
        self.selected_label.setObjectName("selected_label")
        self.horizontalLayout_9.addWidget(self.selected_label)
        self.num_sel_tests_lcd = QtWidgets.QLCDNumber(self.centralwidget)
        self.num_sel_tests_lcd.setMinimumSize(QtCore.QSize(65, 23))
        self.num_sel_tests_lcd.setMaximumSize(QtCore.QSize(65, 24))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.num_sel_tests_lcd.setFont(font)
        self.num_sel_tests_lcd.setAcceptDrops(False)
        self.num_sel_tests_lcd.setAccessibleName("")
        self.num_sel_tests_lcd.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.num_sel_tests_lcd.setAutoFillBackground(False)
        self.num_sel_tests_lcd.setStyleSheet("QFrame {\n"
"    border: 1px solid #495971;\n"
" }")
        self.num_sel_tests_lcd.setFrameShape(QtWidgets.QFrame.Box)
        self.num_sel_tests_lcd.setFrameShadow(QtWidgets.QFrame.Plain)
        self.num_sel_tests_lcd.setLineWidth(1)
        self.num_sel_tests_lcd.setMidLineWidth(0)
        self.num_sel_tests_lcd.setSmallDecimalPoint(False)
        self.num_sel_tests_lcd.setDigitCount(5)
        self.num_sel_tests_lcd.setSegmentStyle(QtWidgets.QLCDNumber.Flat)
        self.num_sel_tests_lcd.setProperty("intValue", 0)
        self.num_sel_tests_lcd.setObjectName("num_sel_tests_lcd")
        self.horizontalLayout_9.addWidget(self.num_sel_tests_lcd)
        self.total_label = QtWidgets.QLabel(self.centralwidget)
        self.total_label.setMaximumSize(QtCore.QSize(50, 40))
        font = QtGui.QFont()
        font.setPointSize(7)
        font.setBold(False)
        font.setWeight(50)
        self.total_label.setFont(font)
        self.total_label.setObjectName("total_label")
        self.horizontalLayout_9.addWidget(self.total_label)
        self.num_total_tests_lcd = QtWidgets.QLCDNumber(self.centralwidget)
        self.num_total_tests_lcd.setMinimumSize(QtCore.QSize(65, 23))
        self.num_total_tests_lcd.setMaximumSize(QtCore.QSize(65, 24))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.num_total_tests_lcd.setFont(font)
        self.num_total_tests_lcd.setStyleSheet("QFrame {\n"
"    border: 1px solid #495971;\n"
" }")
        self.num_total_tests_lcd.setFrameShape(QtWidgets.QFrame.Box)
        self.num_total_tests_lcd.setFrameShadow(QtWidgets.QFrame.Plain)
        self.num_total_tests_lcd.setSegmentStyle(QtWidgets.QLCDNumber.Flat)
        self.num_total_tests_lcd.setObjectName("num_total_tests_lcd")
        self.horizontalLayout_9.addWidget(self.num_total_tests_lcd)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.msg_toolButton = QtWidgets.QToolButton(self.centralwidget)
        self.msg_toolButton.setMaximumSize(QtCore.QSize(25, 25))
        font = QtGui.QFont()
        font.setPointSize(6)
        font.setBold(False)
        font.setWeight(50)
        self.msg_toolButton.setFont(font)
        self.msg_toolButton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.msg_toolButton.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.msg_toolButton.setStyleSheet("border: none;\n"
"background-color: none;")
        self.msg_toolButton.setInputMethodHints(QtCore.Qt.ImhDigitsOnly)
        self.msg_toolButton.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/resources/gui_images/msg_icon_trans.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.msg_toolButton.setIcon(icon4)
        self.msg_toolButton.setIconSize(QtCore.QSize(22, 22))
        self.msg_toolButton.setToolButtonStyle(QtCore.Qt.ToolButtonFollowStyle)
        self.msg_toolButton.setAutoRaise(False)
        self.msg_toolButton.setObjectName("msg_toolButton")
        self.horizontalLayout_2.addWidget(self.msg_toolButton)
        self.horizontalLayout_9.addLayout(self.horizontalLayout_2)
        self.gridLayout_9.addLayout(self.horizontalLayout_9, 4, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.dockWidget = QtWidgets.QDockWidget(MainWindow)
        self.dockWidget.setEnabled(True)
        self.dockWidget.setMinimumSize(QtCore.QSize(109, 167))
        self.dockWidget.setFloating(False)
        self.dockWidget.setFeatures(QtWidgets.QDockWidget.AllDockWidgetFeatures)
        self.dockWidget.setAllowedAreas(QtCore.Qt.AllDockWidgetAreas)
        self.dockWidget.setObjectName("dockWidget")
        self.dockWidgetContents = QtWidgets.QWidget()
        self.dockWidgetContents.setObjectName("dockWidgetContents")
        self.gridLayout = QtWidgets.QGridLayout(self.dockWidgetContents)
        self.gridLayout.setObjectName("gridLayout")
        self.message_plaintextedit = QtWidgets.QPlainTextEdit(self.dockWidgetContents)
        self.message_plaintextedit.setMinimumSize(QtCore.QSize(0, 0))
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(9)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.message_plaintextedit.setFont(font)
        self.message_plaintextedit.setStyleSheet("QFrame {\n"
"    border: 1px solid #495971;\n"
" }")
        self.message_plaintextedit.setFrameShape(QtWidgets.QFrame.Box)
        self.message_plaintextedit.setFrameShadow(QtWidgets.QFrame.Plain)
        self.message_plaintextedit.setReadOnly(True)
        self.message_plaintextedit.setCenterOnScroll(False)
        self.message_plaintextedit.setObjectName("message_plaintextedit")
        self.gridLayout.addWidget(self.message_plaintextedit, 0, 0, 1, 1)
        self.clear_status_txt_pushbutton = QtWidgets.QPushButton(self.dockWidgetContents)
        self.clear_status_txt_pushbutton.setMinimumSize(QtCore.QSize(70, 25))
        self.clear_status_txt_pushbutton.setMaximumSize(QtCore.QSize(70, 25))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.clear_status_txt_pushbutton.setFont(font)
        self.clear_status_txt_pushbutton.setObjectName("clear_status_txt_pushbutton")
        self.gridLayout.addWidget(self.clear_status_txt_pushbutton, 1, 0, 1, 1)
        self.dockWidget.setWidget(self.dockWidgetContents)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(8), self.dockWidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1186, 21))
        self.menubar.setObjectName("menubar")
        self.menuActions = QtWidgets.QMenu(self.menubar)
        self.menuActions.setObjectName("menuActions")
        self.menu_recent_configurations = QtWidgets.QMenu(self.menuActions)
        self.menu_recent_configurations.setObjectName("menu_recent_configurations")
        self.menuView = QtWidgets.QMenu(self.menubar)
        self.menuView.setObjectName("menuView")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        self.menuFeature = QtWidgets.QMenu(self.menuHelp)
        self.menuFeature.setObjectName("menuFeature")
        self.menuBug_Report = QtWidgets.QMenu(self.menuHelp)
        self.menuBug_Report.setObjectName("menuBug_Report")
        self.menu_doc_access = QtWidgets.QMenu(self.menuHelp)
        self.menu_doc_access.setObjectName("menu_doc_access")
        self.menuOptions = QtWidgets.QMenu(self.menubar)
        self.menuOptions.setObjectName("menuOptions")
        self.menuCreate_new_py_file = QtWidgets.QMenu(self.menuOptions)
        self.menuCreate_new_py_file.setObjectName("menuCreate_new_py_file")
        self.menuReports = QtWidgets.QMenu(self.menubar)
        self.menuReports.setObjectName("menuReports")
        self.menu_select_setup_pytest = QtWidgets.QMenu(self.menubar)
        self.menu_select_setup_pytest.setObjectName("menu_select_setup_pytest")
        self.menuLocations = QtWidgets.QMenu(self.menubar)
        self.menuLocations.setObjectName("menuLocations")
        self.menuUIM = QtWidgets.QMenu(self.menubar)
        self.menuUIM.setObjectName("menuUIM")
        MainWindow.setMenuBar(self.menubar)
        self.actionSet_up = QtWidgets.QAction(MainWindow)
        self.actionSet_up.setCheckable(True)
        self.actionSet_up.setObjectName("actionSet_up")
        self.actionCreate_config = QtWidgets.QAction(MainWindow)
        self.actionCreate_config.setCheckable(False)
        self.actionCreate_config.setObjectName("actionCreate_config")
        self.actionLoad_config = QtWidgets.QAction(MainWindow)
        self.actionLoad_config.setObjectName("actionLoad_config")
        self.action_Test_Stats = QtWidgets.QAction(MainWindow)
        self.action_Test_Stats.setObjectName("action_Test_Stats")
        self.action_build_doc = QtWidgets.QAction(MainWindow)
        self.action_build_doc.setObjectName("action_build_doc")
        self.actionzujztu = QtWidgets.QAction(MainWindow)
        self.actionzujztu.setCheckable(True)
        self.actionzujztu.setObjectName("actionzujztu")
        self.actionRVS = QtWidgets.QAction(MainWindow)
        self.actionRVS.setCheckable(True)
        self.actionRVS.setObjectName("actionRVS")
        self.actionJLR = QtWidgets.QAction(MainWindow)
        self.actionJLR.setCheckable(True)
        self.actionJLR.setObjectName("actionJLR")
        self.actionADC246 = QtWidgets.QAction(MainWindow)
        self.actionADC246.setCheckable(True)
        self.actionADC246.setObjectName("actionADC246")
        self.actionLSM = QtWidgets.QAction(MainWindow)
        self.actionLSM.setCheckable(True)
        self.actionLSM.setObjectName("actionLSM")
        self.actionReset = QtWidgets.QAction(MainWindow)
        self.actionReset.setShortcutContext(QtCore.Qt.ApplicationShortcut)
        self.actionReset.setObjectName("actionReset")
        self.action_about = QtWidgets.QAction(MainWindow)
        self.action_about.setObjectName("action_about")
        self.actionExit = QtWidgets.QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.actionSave_Config = QtWidgets.QAction(MainWindow)
        self.actionSave_Config.setObjectName("actionSave_Config")
        self.actionRemove_Selected_Tests = QtWidgets.QAction(MainWindow)
        self.actionRemove_Selected_Tests.setObjectName("actionRemove_Selected_Tests")
        self.actionOpen_Document = QtWidgets.QAction(MainWindow)
        self.actionOpen_Document.setObjectName("actionOpen_Document")
        self.action_user_manual = QtWidgets.QAction(MainWindow)
        self.action_user_manual.setObjectName("action_user_manual")
        self.actionSave_as_config = QtWidgets.QAction(MainWindow)
        self.actionSave_as_config.setCheckable(False)
        self.actionSave_as_config.setObjectName("actionSave_as_config")
        self.action_generate_tests = QtWidgets.QAction(MainWindow)
        self.action_generate_tests.setObjectName("action_generate_tests")
        self.action_config_file_data = QtWidgets.QAction(MainWindow)
        self.action_config_file_data.setObjectName("action_config_file_data")
        self.action_Line_wrap_output_log = QtWidgets.QAction(MainWindow)
        self.action_Line_wrap_output_log.setCheckable(True)
        self.action_Line_wrap_output_log.setChecked(True)
        self.action_Line_wrap_output_log.setObjectName("action_Line_wrap_output_log")
        self.action_dark_mode = QtWidgets.QAction(MainWindow)
        self.action_dark_mode.setCheckable(True)
        self.action_dark_mode.setChecked(False)
        self.action_dark_mode.setObjectName("action_dark_mode")
        self.action_create_sample_setup_file = QtWidgets.QAction(MainWindow)
        self.action_create_sample_setup_file.setObjectName("action_create_sample_setup_file")
        self.action_create_sample_pytest_file = QtWidgets.QAction(MainWindow)
        self.action_create_sample_pytest_file.setObjectName("action_create_sample_pytest_file")
        self.actionEdit_Config = QtWidgets.QAction(MainWindow)
        self.actionEdit_Config.setObjectName("actionEdit_Config")
        self.action_reopen_last_opened_configuration = QtWidgets.QAction(MainWindow)
        self.action_reopen_last_opened_configuration.setCheckable(True)
        self.action_reopen_last_opened_configuration.setObjectName("action_reopen_last_opened_configuration")
        self.actionHow_To_Video = QtWidgets.QAction(MainWindow)
        self.actionHow_To_Video.setObjectName("actionHow_To_Video")
        self.action_create_feature_video = QtWidgets.QAction(MainWindow)
        self.action_create_feature_video.setObjectName("action_create_feature_video")
        self.action_create_feature = QtWidgets.QAction(MainWindow)
        self.action_create_feature.setObjectName("action_create_feature")
        self.action_create_bug_video = QtWidgets.QAction(MainWindow)
        self.action_create_bug_video.setObjectName("action_create_bug_video")
        self.action_create_bug = QtWidgets.QAction(MainWindow)
        self.action_create_bug.setObjectName("action_create_bug")
        self.action_faqs = QtWidgets.QAction(MainWindow)
        self.action_faqs.setObjectName("action_faqs")
        self.action_training_videos = QtWidgets.QAction(MainWindow)
        self.action_training_videos.setObjectName("action_training_videos")
        self.action_short_cuts = QtWidgets.QAction(MainWindow)
        self.action_short_cuts.setObjectName("action_short_cuts")
        self.action_release_notes = QtWidgets.QAction(MainWindow)
        self.action_release_notes.setObjectName("action_release_notes")
        self.action_report_open = QtWidgets.QAction(MainWindow)
        self.action_report_open.setObjectName("action_report_open")
        self.action_open_html_report = QtWidgets.QAction(MainWindow)
        self.action_open_html_report.setObjectName("action_open_html_report")
        self.action_open_txt_report = QtWidgets.QAction(MainWindow)
        self.action_open_txt_report.setObjectName("action_open_txt_report")
        self.action_open_json_report = QtWidgets.QAction(MainWindow)
        self.action_open_json_report.setObjectName("action_open_json_report")
        self.action_open_xml_report = QtWidgets.QAction(MainWindow)
        self.action_open_xml_report.setObjectName("action_open_xml_report")
        self.action_open_base_loc = QtWidgets.QAction(MainWindow)
        self.action_open_base_loc.setObjectName("action_open_base_loc")
        self.action_open_pytest_loc = QtWidgets.QAction(MainWindow)
        self.action_open_pytest_loc.setObjectName("action_open_pytest_loc")
        self.action_pmt_service_desk_video = QtWidgets.QAction(MainWindow)
        self.action_pmt_service_desk_video.setObjectName("action_pmt_service_desk_video")
        self.action_open_setup_file = QtWidgets.QAction(MainWindow)
        self.action_open_setup_file.setObjectName("action_open_setup_file")
        self.action_open_cathat_xml_report = QtWidgets.QAction(MainWindow)
        self.action_open_cathat_xml_report.setObjectName("action_open_cathat_xml_report")
        self.action_create_feature_video_2 = QtWidgets.QAction(MainWindow)
        self.action_create_feature_video_2.setObjectName("action_create_feature_video_2")
        self.action_create_bug_video_2 = QtWidgets.QAction(MainWindow)
        self.action_create_bug_video_2.setObjectName("action_create_bug_video_2")
        self.action_doc_access_info = QtWidgets.QAction(MainWindow)
        self.action_doc_access_info.setObjectName("action_doc_access_info")
        self.action_doc_access_video = QtWidgets.QAction(MainWindow)
        self.action_doc_access_video.setObjectName("action_doc_access_video")
        self.action_uim = QtWidgets.QAction(MainWindow)
        self.action_uim.setObjectName("action_uim")
        self.action_uim_doc = QtWidgets.QAction(MainWindow)
        self.action_uim_doc.setObjectName("action_uim_doc")
        self.action_external_report_open = QtWidgets.QAction(MainWindow)
        self.action_external_report_open.setObjectName("action_external_report_open")
        self.menu_recent_configurations.addSeparator()
        self.menu_recent_configurations.addAction(self.action_reopen_last_opened_configuration)
        self.menuActions.addAction(self.actionCreate_config)
        self.menuActions.addAction(self.actionLoad_config)
        self.menuActions.addAction(self.menu_recent_configurations.menuAction())
        self.menuActions.addAction(self.action_generate_tests)
        self.menuActions.addAction(self.actionEdit_Config)
        self.menuActions.addAction(self.actionSave_Config)
        self.menuActions.addAction(self.actionSave_as_config)
        self.menuActions.addSeparator()
        self.menuActions.addAction(self.actionExit)
        self.menuView.addAction(self.action_config_file_data)
        self.menuView.addAction(self.action_Line_wrap_output_log)
        self.menuFeature.addAction(self.action_create_feature)
        self.menuFeature.addAction(self.action_create_feature_video_2)
        self.menuBug_Report.addAction(self.action_create_bug)
        self.menuBug_Report.addAction(self.action_create_bug_video_2)
        self.menu_doc_access.addAction(self.action_doc_access_info)
        self.menu_doc_access.addAction(self.action_doc_access_video)
        self.menuHelp.addAction(self.action_user_manual)
        self.menuHelp.addAction(self.action_release_notes)
        self.menuHelp.addAction(self.action_faqs)
        self.menuHelp.addAction(self.action_training_videos)
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.menuFeature.menuAction())
        self.menuHelp.addAction(self.menuBug_Report.menuAction())
        self.menuHelp.addAction(self.action_pmt_service_desk_video)
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.menu_doc_access.menuAction())
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.action_short_cuts)
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.action_about)
        self.menuCreate_new_py_file.addAction(self.action_create_sample_setup_file)
        self.menuCreate_new_py_file.addAction(self.action_create_sample_pytest_file)
        self.menuOptions.addAction(self.menuCreate_new_py_file.menuAction())
        self.menuOptions.addAction(self.action_open_setup_file)
        self.menuReports.addAction(self.action_open_html_report)
        self.menuReports.addAction(self.action_open_txt_report)
        self.menuReports.addAction(self.action_open_json_report)
        self.menuReports.addAction(self.action_open_xml_report)
        self.menuReports.addAction(self.action_open_cathat_xml_report)
        self.menuReports.addSeparator()
        self.menuReports.addAction(self.action_report_open)
        self.menuReports.addAction(self.action_external_report_open)
        self.menuLocations.addAction(self.action_open_base_loc)
        self.menuLocations.addAction(self.action_open_pytest_loc)
        self.menuUIM.addAction(self.action_uim)
        self.menuUIM.addSeparator()
        self.menuUIM.addAction(self.action_uim_doc)
        self.menubar.addAction(self.menuActions.menuAction())
        self.menubar.addAction(self.menuUIM.menuAction())
        self.menubar.addAction(self.menuOptions.menuAction())
        self.menubar.addAction(self.menuLocations.menuAction())
        self.menubar.addAction(self.menu_select_setup_pytest.menuAction())
        self.menubar.addAction(self.menuReports.menuAction())
        self.menubar.addAction(self.menuView.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())

        self.retranslateUi(MainWindow)
        self.select_tests_tabwidget.setCurrentIndex(1)
        self.actionExit.triggered.connect(MainWindow.close)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        self.filter_groupbox.setTitle(_translate("MainWindow", "Filter Tags"))
        self.stage_select_combobox.setToolTip(_translate("MainWindow", "<html><head/><body><p>Check <span style=\" font-weight:600;\">OR</span> box to apply an OR filter to the selected test tags and display the test cases that contains those tags on GUI.</p></body></html>"))
        self.cb_and_tags_filter.setToolTip(_translate("MainWindow", "<html><head/><body><p>Check <span style=\" font-weight:600;\">AND</span> box to apply an AND filter to the selected test tags and display the test cases that contains those tags on GUI.</p><p>Un-Check <span style=\" font-weight:600;\">AND</span> box to remove the AND filter and apply the OR filter.<br/></p></body></html>\n"
""))
        self.cb_and_tags_filter.setText(_translate("MainWindow", "AND"))
        self.cb_all_tags.setToolTip(_translate("MainWindow", "<html><head/><body><p>Check <span style=\" font-weight:600;\">All Tags</span> to select all test tags and display test cases on GUI.</p><p>Un-Check <span style=\" font-weight:600;\">All Tags</span> to deselect all test tags.<br/></p></body></html>"))
        self.cb_all_tags.setText(_translate("MainWindow", "All Tags"))
        self.cb_or_tags_filter.setToolTip(_translate("MainWindow", "<html><head/><body><p>Check <span style=\" font-weight:600;\">OR</span> box to apply an OR filter to the selected test tags and display the test cases that contains those tags on GUI.</p><p>Un-Check <span style=\" font-weight:600;\">OR</span> box to remove the OR filter and apply the AND filter.<br/></p></body></html>\n"
""))
        self.cb_or_tags_filter.setText(_translate("MainWindow", "OR"))
        self.loopstorun_groupbox.setTitle(_translate("MainWindow", "Run multiple times"))
        self.execution_parameters_groupbox.setTitle(_translate("MainWindow", "Execution parameters"))
        self.run_only_failed.setToolTip(_translate("MainWindow", "If selected, only failed testcases will be executed."))
        self.run_only_failed.setText(_translate("MainWindow", "Failed Tests"))
        self.random_execution.setToolTip(_translate("MainWindow", "If this checkbox is checked, tests will be executed in random order"))
        self.random_execution.setText(_translate("MainWindow", "Randomize \n"
"Execution"))
        self.cb_run_unselected.setToolTip(_translate("MainWindow", "<html><head/><body><p>Select this checkbox if you want to reverse the tests selections</p></body></html>"))
        self.cb_run_unselected.setText(_translate("MainWindow", "Reverse Tests\n"
"Selections"))
        self.stop_pushbutton.setToolTip(_translate("MainWindow", "<html><head/><body><p>Click or press <span style=\" font-weight:600;\">ctrl+k</span> to stop executing tests</p></body></html>"))
        self.stop_pushbutton.setWhatsThis(_translate("MainWindow", "<html><head/><body><p><br/></p></body></html>"))
        self.stop_pushbutton.setShortcut(_translate("MainWindow", "Ctrl+K"))
        self.runtest_pushbutton.setToolTip(_translate("MainWindow", "<html><head/><body><p>Click or press <span style=\" font-weight:600;\">ctrl+r </span>to start executing selected tests</p></body></html>"))
        self.runtest_pushbutton.setShortcut(_translate("MainWindow", "Ctrl+R"))
        self.reload_pushbutton.setToolTip(_translate("MainWindow", "<html><head/><body><p>Click or press<span style=\" font-weight:600;\"> ctrl+shift+l </span>to reload tests in-case you have updated tests or wrote new tests</p></body></html>"))
        self.reload_pushbutton.setShortcut(_translate("MainWindow", "Ctrl+Shift+L"))
        self.searchbar_linedit.setToolTip(_translate("MainWindow", "<html><head/><body><p>Search a test case</p></body></html>"))
        self.searchbar_linedit.setPlaceholderText(_translate("MainWindow", "Search tests here"))
        self.expand_tree_pushbutton.setText(_translate("MainWindow", "Expand All"))
        self.select_tests_tabwidget.setTabText(self.select_tests_tabwidget.indexOf(self.select_and_run_tab), _translate("MainWindow", "Select and Run"))
        item = self.output_tablewidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Running Test Cases"))
        item = self.output_tablewidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Execution Time"))
        self.console_searchbar_linedit.setPlaceholderText(_translate("MainWindow", "Search Console"))
        self.output_console_textedit.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Arial\'; font-size:8pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'MS Shell Dlg 2\';\"><br /></p></body></html>"))
        self.output_console_textedit.setPlaceholderText(_translate("MainWindow", "Console Output"))
        self.select_tests_tabwidget.setTabText(self.select_tests_tabwidget.indexOf(self.tab_outputs), _translate("MainWindow", "Outputs"))
        self.dark_mode_label.setText(_translate("MainWindow", "Dark Mode:"))
        self.slider_dark_mode.setToolTip(_translate("MainWindow", "<html><head/><body><p>&gt;&gt; Dark Mode ON<br/>&lt;&lt; Dark Mode OFF</p></body></html>"))
        self.total_label_2.setToolTip(_translate("MainWindow", "<html><head/><body><p>no. of tests to be executed</p></body></html>"))
        self.total_label_2.setText(_translate("MainWindow", "Total Tests Ran:"))
        self.total_running_lcd.setToolTip(_translate("MainWindow", "<html><head/><body><p>no. of tests to be executed</p></body></html>"))
        self.passed_label.setToolTip(_translate("MainWindow", "<html><head/><body><p>no. of passed tests</p></body></html>"))
        self.passed_label.setText(_translate("MainWindow", "Pass:"))
        self.passed_running_lcd.setToolTip(_translate("MainWindow", "<html><head/><body><p>no. of passed tests</p></body></html>"))
        self.inconl_label.setToolTip(_translate("MainWindow", "<html><head/><body><p>no. of inconclusive tests (only warnings)</p></body></html>"))
        self.inconl_label.setText(_translate("MainWindow", "Inconclusive:"))
        self.inconclusive_running_lcd.setToolTip(_translate("MainWindow", "<html><head/><body><p>no. of inconclusive tests (only warnings)</p></body></html>"))
        self.skip_label.setText(_translate("MainWindow", "Skip:"))
        self.skip_running_lcd.setToolTip(_translate("MainWindow", "<html><head/><body><p>no. of skipped tests</p></body></html>"))
        self.failed_label.setToolTip(_translate("MainWindow", "<html><head/><body><p>no. of failed tests</p></body></html>"))
        self.failed_label.setText(_translate("MainWindow", "Fail:"))
        self.failed_running_lcd.setToolTip(_translate("MainWindow", "<html><head/><body><p>no. of failed tests</p></body></html>"))
        self.exe_time_label.setText(_translate("MainWindow", "ExeTime:"))
        self.selected_label.setToolTip(_translate("MainWindow", "<html><head/><body><p>no. of tests selected to be executed on &quot;Select and Run&quot; tab</p></body></html>"))
        self.selected_label.setText(_translate("MainWindow", "Selected:"))
        self.num_sel_tests_lcd.setToolTip(_translate("MainWindow", "<html><head/><body><p>no. of tests selected to be executed on &quot;Select and Run&quot; tab</p></body></html>"))
        self.total_label.setToolTip(_translate("MainWindow", "<html><head/><body><p>no. of tests available for selection on &quot;Select and Run&quot; tab</p></body></html>"))
        self.total_label.setText(_translate("MainWindow", "Total:"))
        self.num_total_tests_lcd.setToolTip(_translate("MainWindow", "<html><head/><body><p>no. of tests available for selection on &quot;Select and Run&quot; tab</p></body></html>"))
        self.msg_toolButton.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:8pt;\">Event Log</span></p></body></html>"))
        self.msg_toolButton.setShortcut(_translate("MainWindow", "Ctrl+M"))
        self.message_plaintextedit.setPlaceholderText(_translate("MainWindow", "Status Messages"))
        self.clear_status_txt_pushbutton.setText(_translate("MainWindow", "Clear"))
        self.menuActions.setTitle(_translate("MainWindow", "Menu"))
        self.menu_recent_configurations.setTitle(_translate("MainWindow", "Recent Configurations"))
        self.menuView.setTitle(_translate("MainWindow", "View"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.menuFeature.setTitle(_translate("MainWindow", "Feature Request"))
        self.menuBug_Report.setTitle(_translate("MainWindow", "Problem Report"))
        self.menu_doc_access.setTitle(_translate("MainWindow", "Doc Access"))
        self.menuOptions.setTitle(_translate("MainWindow", "Files"))
        self.menuCreate_new_py_file.setTitle(_translate("MainWindow", "Create New Test File..."))
        self.menuReports.setTitle(_translate("MainWindow", "Reports"))
        self.menu_select_setup_pytest.setToolTip(_translate("MainWindow", "<html><head/><body><p>Select <span style=\" font-weight:600;\">setup.pytest</span> file to execute particular <span style=\" font-weight:600;\">setup</span> &amp; <span style=\" font-weight:600;\">teardown</span> functions.</p><p>Multiple setup files can be created in base location for specific usecases and can be selected from this menu.</p><p>By default <span style=\" font-weight:600;\">setup.pytest </span>shall be used.</p><p><span style=\" font-weight:600;\">NOTE: </span>New setup files need to be named as <span style=\" font-weight:600; font-style:italic; color:#ff5500;\">setup_</span><span style=\" font-weight:600; font-style:italic; color:#55557f;\">&lt;any_name&gt;</span><span style=\" font-weight:600; font-style:italic; color:#ff5500;\">.pytest</span></p></body></html>"))
        self.menu_select_setup_pytest.setTitle(_translate("MainWindow", "setup.pytest"))
        self.menuLocations.setTitle(_translate("MainWindow", "Locations"))
        self.menuUIM.setTitle(_translate("MainWindow", "UIM"))
        self.actionSet_up.setText(_translate("MainWindow", "Add Project"))
        self.actionCreate_config.setText(_translate("MainWindow", "Create Config"))
        self.actionCreate_config.setShortcut(_translate("MainWindow", "Ctrl+N"))
        self.actionLoad_config.setText(_translate("MainWindow", "Load Config"))
        self.actionLoad_config.setShortcut(_translate("MainWindow", "Ctrl+L"))
        self.action_Test_Stats.setText(_translate("MainWindow", "Test Stats"))
        self.action_build_doc.setText(_translate("MainWindow", "Build documentation"))
        self.actionzujztu.setText(_translate("MainWindow", "zujztu"))
        self.actionRVS.setText(_translate("MainWindow", "RVS"))
        self.actionJLR.setText(_translate("MainWindow", "JLR"))
        self.actionADC246.setText(_translate("MainWindow", "ADC246"))
        self.actionLSM.setText(_translate("MainWindow", "XYZ etc"))
        self.actionReset.setText(_translate("MainWindow", "Reset"))
        self.actionReset.setShortcut(_translate("MainWindow", "Ctrl+Shift+R"))
        self.action_about.setText(_translate("MainWindow", "About"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.actionExit.setShortcut(_translate("MainWindow", "Ctrl+Q"))
        self.actionSave_Config.setText(_translate("MainWindow", "Save Config"))
        self.actionSave_Config.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.actionRemove_Selected_Tests.setText(_translate("MainWindow", "Remove Test Info"))
        self.actionRemove_Selected_Tests.setShortcut(_translate("MainWindow", "Ctrl+X"))
        self.actionOpen_Document.setText(_translate("MainWindow", "Open Document"))
        self.action_user_manual.setText(_translate("MainWindow", "User Manual"))
        self.actionSave_as_config.setText(_translate("MainWindow", "Save as Config"))
        self.actionSave_as_config.setShortcut(_translate("MainWindow", "Ctrl+Shift+S"))
        self.action_generate_tests.setText(_translate("MainWindow", "Generate Tests"))
        self.action_generate_tests.setShortcut(_translate("MainWindow", "Ctrl+G"))
        self.action_config_file_data.setText(_translate("MainWindow", "Config File Data"))
        self.action_Line_wrap_output_log.setText(_translate("MainWindow", "Line-wrap output log"))
        self.action_dark_mode.setText(_translate("MainWindow", "Dark Mode"))
        self.action_create_sample_setup_file.setText(_translate("MainWindow", "Setup File (.pytest)"))
        self.action_create_sample_pytest_file.setText(_translate("MainWindow", "Test Script (.pytest)"))
        self.actionEdit_Config.setText(_translate("MainWindow", "Edit Config"))
        self.actionEdit_Config.setShortcut(_translate("MainWindow", "Ctrl+E"))
        self.action_reopen_last_opened_configuration.setText(_translate("MainWindow", "Reopen last configuration"))
        self.action_reopen_last_opened_configuration.setToolTip(_translate("MainWindow", "Reopen the last opened configuration on next start"))
        self.actionHow_To_Video.setText(_translate("MainWindow", "How To Video"))
        self.action_create_feature_video.setText(_translate("MainWindow", "Video (Coming Soon)"))
        self.action_create_feature.setText(_translate("MainWindow", "Create"))
        self.action_create_bug_video.setText(_translate("MainWindow", "Video (Coming Soon)"))
        self.action_create_bug.setText(_translate("MainWindow", "Create"))
        self.action_faqs.setText(_translate("MainWindow", "FAQs"))
        self.action_training_videos.setText(_translate("MainWindow", "Training Videos"))
        self.action_short_cuts.setText(_translate("MainWindow", "Short-Cuts"))
        self.action_release_notes.setText(_translate("MainWindow", "Release Notes"))
        self.action_report_open.setText(_translate("MainWindow", "Reports Folder"))
        self.action_open_html_report.setText(_translate("MainWindow", "HTML Summary"))
        self.action_open_html_report.setToolTip(_translate("MainWindow", "<html><head/><body><p>Menu for viewing different reports generated after tests executions.</p></body></html>"))
        self.action_open_txt_report.setText(_translate("MainWindow", "TXT Summary"))
        self.action_open_json_report.setText(_translate("MainWindow", "JSON Report"))
        self.action_open_xml_report.setText(_translate("MainWindow", "XML Report"))
        self.action_open_base_loc.setText(_translate("MainWindow", "Open Base Location"))
        self.action_open_pytest_loc.setText(_translate("MainWindow", "Open Python Tests Location"))
        self.action_pmt_service_desk_video.setText(_translate("MainWindow", "PMT Service Desk Video"))
        self.action_open_setup_file.setText(_translate("MainWindow", "Open Setup File"))
        self.action_open_cathat_xml_report.setText(_translate("MainWindow", "CatHat XML Report"))
        self.action_create_feature_video_2.setText(_translate("MainWindow", "Video"))
        self.action_create_bug_video_2.setText(_translate("MainWindow", "Video"))
        self.action_doc_access_info.setText(_translate("MainWindow", "Info"))
        self.action_doc_access_video.setText(_translate("MainWindow", "Video"))
        self.action_uim.setText(_translate("MainWindow", "Install Manager"))
        self.action_uim.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:8pt;\">Click to open ConTest Utility Install Manager.</span></p></body></html>"))
        self.action_uim_doc.setText(_translate("MainWindow", "Documentation"))
        self.action_uim_doc.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:8pt;\">Click to open ConTest UIM (</span><span style=\" font-size:8pt; text-decoration: underline;\">U</span><span style=\" font-size:8pt;\">tility </span><span style=\" font-size:8pt; text-decoration: underline;\">I</span><span style=\" font-size:8pt;\">nstall </span><span style=\" font-size:8pt; text-decoration: underline;\">M</span><span style=\" font-size:8pt;\">anager)</span></p></body></html>"))
        self.action_external_report_open.setText(_translate("MainWindow", "External Reports Folder"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
