"""
Generated by Sphinx and modified according to project doc build
"""
# -*- coding: utf-8 -*-
#
# ConTest (PTF) Documentation documentation build configuration file, created by
# sphinx-quickstart on Wed Oct 11 12:19:33 2017.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#

# disabling import error as they are installed at start of framework
# other lints are disabled as most content of this file is autogenerated via Sphinx
# pylint: disable=import-error, wrong-import-position, invalid-name
import os
import time
import sys
import sphinx_rtd_theme


# added path for API doc. build
cwd = os.path.dirname(os.path.realpath(__file__))
# adding current working directory to sys path for sphinx doc build
sys.path.append(cwd)
# adding the base PTF directory in system path list in order to
# avoid any missing module errors during Sphinx api-doc build
ptf_base_directory = os.path.join(cwd, "..", "..")
sys.path.append(ptf_base_directory)
sys.path.append(os.path.join(ptf_base_directory, ".."))
# loop for adding all sub-folders in 'tools_utils' folder which are
# in Sphinx api-doc build
for dir_path, _dir_names, file_names in os.walk(os.path.join(ptf_base_directory, "tools_utils")):
    if "__init__.py" in file_names:
        sys.path.append(dir_path)
    else:
        pass
sys.path.append(os.path.join(ptf_base_directory, "tools_ctrls"))
sys.path.append(os.path.join(ptf_base_directory, "project_utils"))
sys.path.append(os.path.join(ptf_base_directory, "ptf_utils"))
sys.path.append(os.path.join(ptf_base_directory, "verify_utils"))
# disabling error "module level import not at top of file" because it can only be imported after
# adding its location in sys.path
# pylint: disable=wrong-import-position
import doc_prep  # noqa: E402
import global_vars  # noqa: E402

# call a function to prepare the API docs before main sphinx doc build
doc_prep.doc_build_pre_steps()

# ---------------------- General configuration ------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = ["sphinx.ext.autodoc", "sphinx.ext.doctest", "sphinx.ext.coverage", "sphinx.ext.imgmath"]

# Add any paths that contain templates here, relative to this directory.
templates_path = ["doc_templates"]

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = ".rst"

# The master toctree document.
master_doc = "index"

# General information about the project.
project = "ConTest"
# `copyright` variable is used internally by Sphinx
# pylint: disable=redefined-builtin
copyright = time.strftime("%Y") + ", Test Platform Tools & Innovation Team"
author = "Test Platform Tools & Innovation Team"

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = global_vars.DOC_VERSION
# The full version, including alpha/beta/rc tags.
release = global_vars.DOC_VERSION

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = []

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = "sphinx"

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = False

# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = "sphinx_rtd_theme"
html_favicon = "logo_icon.png"

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# This is required for the alabaster theme
# refs: http://alabaster.readthedocs.io/en/latest/installation.html#sidebars
html_sidebars = {
    "**": [
        "globaltoc.html",
        "about.html",
        "navigation.html",
        "relations.html",  # needs 'show_related': True theme option to display
        "searchbox.html",
        "donate.html",
    ]
}

# -- Options for HTMLHelp output ------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = "ConTestDocumentationdoc"

# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',
    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',
    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',
    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, "ConTestPTFDocumentation.tex", "", "Test Platform Tools & Innovation Team", "manual"),
]

# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [(master_doc, "contestdocumentation", "", [author], 1)]

# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (
        master_doc,
        "PythonTestFrameworkPTFDocumentation",
        "",
        author,
        "PythonTestFrameworkPTFDocumentation",
        "One line description of project.",
        "Miscellaneous",
    ),
]
