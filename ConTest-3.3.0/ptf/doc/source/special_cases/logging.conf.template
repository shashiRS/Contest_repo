# Example configuration for customizing log outputs.
# Please adapt for your needs. More details about this file can be found at
# https://docs.python.org/3/library/logging.config.html#logging-config-fileformat

# The logger configuration names.
[loggers]
# The root logger always needs to be configured.
# Other logger names can be freely defined.
keys=root,my_custom_logger

# The handlers to use
[handlers]
keys=defaultConsoleHandler,fileHandler

# The formatters to use
[formatters]
keys=defaultFormatter,timestampFormatter

# Root logger configuration
[logger_root]
level=INFO
handlers=defaultConsoleHandler

# A custom logger configuration.
[logger_my_custom_logger]
# still print on console, but also to a file
handlers=defaultConsoleHandler,fileHandler
# ... and with level DEBUG instead of INFO
level=DEBUG
# The name of the logger as defined in getLogger(<name>)
qualname=pyvisa
# Stop propagating to root logger
propagate=0

# Default console handler configuration
[handler_defaultConsoleHandler]
class=main.ConsoleHandler
formatter=defaultFormatter

# Handler to write to a file with timestamps. Uses rotating log writer
# that limits logfiles to a max. size of ~1 MByte with 5 backup files.
[handler_fileHandler]
class=logging.handlers.RotatingFileHandler
formatter=timestampFormatter
args=('logfile.log',)
kwargs={'maxBytes': 1000000, 'backupCount': 5}

# Default formatter
[formatter_defaultFormatter]
format=[ConTest %(name)s] %(message)s

# A formatter that contains timestamps and log levels
[formatter_timestampFormatter]
format=%(asctime)s - %(name)s - %(levelname)s - %(message)s