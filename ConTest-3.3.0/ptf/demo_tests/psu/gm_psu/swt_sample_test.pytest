"""
    Copyright 2022 Continental Corporation

    :file: swt_sample_test.pytest
    :platform: Windows, Linux
    :synopsis:
        This file contains sample test(s) for the GOSSEN METRAWATT power supplies, using
        PSU tool util

    :author:
        - Ganga Prabhakar Guntamukkala <ganga.prabhakar.guntamukkala@continental-corporation.com>
"""


# standard Python import area


# ConTest or custom import area
# NOTE : ALWAYS IMPORT (contest_expects, contest_asserts, report and get_parameter) AS BELOW.
#        FOR PROPER DOCUMENTATION AND ERROR REPORTING
from contest_verify.verify import contest_asserts
from contest_verify.verify import contest_expects
from ptf.ptf_utils.report import DETAILS, PRECONDITION, VERIFIES, TESTTAG, TESTSTEP, EXPECTED, TESTCASE
from ptf.ptf_utils.global_params import get_parameter


def SWT_PSU_READ_VALUESv1():
    DETAILS("Demo test to show how to read values (V/I) from PSU")
    PRECONDITION("Ensure the power supply interface connected properly")

    VERIFIES("L3_SW_CHECK_PSU")

    TESTTAG("hil")

    TESTCASE()

    TESTSTEP("Grabbing PSU variable created in global setup")
    EXPECTED("Variables grabbed")
    gm_psu = get_parameter("psu_app")

    TESTSTEP("Reading output voltage from PSU")
    EXPECTED("Voltage read successfully")
    output_voltage = gm_psu.get_output_voltage()
    print('Output voltage = ' + str(output_voltage) + ' V')

    TESTSTEP("Reading output current from PSU")
    EXPECTED("Current read successfully")
    output_current = gm_psu.get_output_current()
    print('Output current = ' + str(output_current) + ' A')

    TESTSTEP("Reading set voltage on PSU")
    EXPECTED("Voltage read successfully")
    set_voltage = gm_psu.get_set_voltage()
    print('Set voltage = ' + str(set_voltage) + ' V')

    TESTSTEP("Reading set current on PSU")
    EXPECTED("Current read successfully")
    set_current = gm_psu.get_set_current()
    print('Set current = ' + str(set_current) + ' A')

    TESTSTEP("Reading limit voltage from PSU")
    EXPECTED("Voltage read successfully")
    limit_voltage = gm_psu.get_voltage_limit()
    print('Limit voltage = ' + str(limit_voltage) + ' V')

    TESTSTEP("Reading limit current from PSU")
    EXPECTED("Current read successfully")
    limit_current = gm_psu.get_current_limit()
    print('Limit current = ' + str(limit_current) + ' A')


def SWT_PSU_SET_VOLTAGEv1():
    DETAILS("Demo test to show how to set voltage from PSU")
    PRECONDITION("Ensure the power supply interface connected properly")

    VERIFIES("L3_SW_CHECK_PSU")

    TESTTAG("hil")

    TESTCASE()

    TESTSTEP("Grabbing PSU variable created in global setup")
    EXPECTED("Variables grabbed")
    gm_psu = get_parameter("psu_app")

    # to set voltage
    voltage = 6.0

    TESTSTEP("Reading output voltage from PSU")
    EXPECTED("Voltage read successfully")
    output_voltage_before_set = gm_psu.get_output_voltage()
    print('Output voltage = ' + str(output_voltage_before_set) + ' V')

    TESTSTEP("Change and verify voltage on PSU to 6.0 Volts by using set_voltage API")
    EXPECTED("Voltage set successfully")
    # voltage verification will also be done by 'set_operating_voltage' API
    gm_psu.set_operating_voltage(voltage)

    TESTSTEP("Reading output voltage from PSU after changing voltage value")
    EXPECTED("Voltage read successfully")
    output_voltage_after_set = gm_psu.get_output_voltage()
    print('Output voltage = ' + str(output_voltage_after_set) + ' V')

    TESTSTEP("Check voltage value")
    EXPECTED("Voltage value shall be 9.0 i.e. less than previous read voltage")
    contest_asserts.verify_gt(output_voltage_before_set, output_voltage_after_set,
                          'Voltage not set correctly')


def SWT_PSU_SET_VOLT_CUR_TOLERANCEv1():
    DETAILS("Demo test to show setting different voltages with user defined tolerances")
    PRECONDITION("Ensure the power supply interface connected properly")

    VERIFIES("L3_SW_CHECK_PSU")

    TESTTAG("hil")

    TESTCASE()

    TESTSTEP("Grabbing PSU variable created in global setup")
    EXPECTED("Variables grabbed")
    gm_psu = get_parameter("psu_app")

    TESTSTEP("Reading output voltage from PSU")
    EXPECTED("Voltage read successfully")
    output_voltage_before_set = gm_psu.get_output_voltage()
    print('Output voltage = ' + str(output_voltage_before_set) + ' V')

    # to set voltage
    voltage = 12.0
    TESTSTEP("Set the Voltage limit on PSU to 12.0 Volts within the tolerance of 0.20")
    EXPECTED("Voltage limit set successfully")
    # voltage verification will also be done by 'set_voltage_limit' API
    gm_psu.set_voltage_limit(volt_limit=voltage, tolerance=0.20)

    # to set current
    current = 3.0
    TESTSTEP("Set the Current limit on PSU to 3.0 Amps within the tolerance of 0.10")
    EXPECTED("Current limit set successfully")
    # Current verification will also be done by 'set_current_limit' API
    gm_psu.set_current_limit(current_limit=current, tolerance=0.10)

    # to set voltage
    voltage = 5.0
    TESTSTEP("Change and verify voltage on PSU to 5.0 Volts with the tolerance of 0.15")
    EXPECTED("Voltage set successfully within the tolerance")
    # voltage verification will also be done by 'set_operating_voltage' API
    gm_psu.set_operating_voltage(volt_value=voltage, tolerance=0.15)

    # to set current
    current = 3.0
    TESTSTEP("Change and verify current on PSU to 3.0 Amps with the tolerance of 0.15")
    EXPECTED("Current set successfully within the tolerance")
    # current verification will also be done by 'set_operating_current' API
    gm_psu.set_operating_current(current_value=current, tolerance=0.15)

    # to set voltage
    voltage = 0.0
    TESTSTEP("Change and verify voltage on PSU to 0.0 Volts")
    EXPECTED("Voltage set successfully within the tolerance")
    # voltage verification will also be done by 'set_operating_voltage' API
    gm_psu.set_operating_voltage(volt_value=voltage)
