"""
    Copyright 2021 Continental Corporation

    :file: swt_sample_test.pytest
    :platform: Windows
    :synopsis:
        Demo tests for usage of ODIS tool APIs with CAN/CANFD based connection.

    :author:
        - Ganga Prabhakar G <ganga.prabhakar.guntamukkala@continental-corporation.com>
"""

from ptf.ptf_utils.report import *
from ptf.ptf_utils.global_params import get_parameter


def SWT_ODIS_READ_IDENTIFICATION_TESTv1():
    DETAILS("This is an example test case to read SPECIFIC IDENTIFICATION DATA using ODIS, "
            "when gateway (e.g. HCP5) is present")
    DETAILS("This test case is specific to VW ADC424 ECU")
    PRECONDITION("VW ADC424 ECU and gateway ECU (e.g. HCP5) to be connected properly and check "
                 "manually before running this test case")

    VERIFIES("ODIS read Identification API when gateway (e.g. HCP5) is present")

    TESTTAG("HiL")

    TESTSTEP("Fetching ODIS Instance created in 'global_setup'")
    EXPECTED("ODIS class instance grabbed successfully")
    odis = get_parameter("odis_tool")

    DETAILS("Note: ODIS Web interface is started and DoIPVCI list is acquired in global_setup. "
            "This will run until the next 'exit_odis' API call. This is called in global_teardown")

    TESTSTEP("Getting Connection handle based on the Project and ECU IP Address")
    EXPECTED("Connection handle for the Connected ECU acquired successfully")
    # For CAN/CANFD based connections, Project and Veh_info are mandatory.
    con_handle = odis.get_connection_handle(project='PDX_Catalog_X070', veh_info="VINFO_AUE41CAN")

    TESTSTEP("Read 'VW ECU Hardware Version Number'")
    EXPECTED("'VW ECU Hardware Version Number' read successfully")
    print(odis.read_identification_data_by_short_name(connection_handle=con_handle,
                                                      short_sub_name='',
                                                      ident_short_name='VW ECU Hardware Version '
                                                                       'Number'))


def SWT_ODIS_FLASHING_TESTv1():
    DETAILS("This is an example test case to perform flashing using ODIS Flashing API when "
            "gateway (e.g. HCP5) is present")
    DETAILS("This test case is specific to VW ADC424 ECU")
    PRECONDITION("VW ADC424 ECU and gateway ECU (e.g. HCP5) to be connected properly and check "
                 "manually before running this test case")

    VERIFIES("ODIS Flashing APIs when gateway (e.g. HCP5) is present")

    TESTTAG("HiL")

    TESTSTEP("Fetching ODIS Instance created in 'global_setup'")
    EXPECTED("ODIS class instance grabbed successfully")
    odis = get_parameter("odis_tool")

    DETAILS("Note: ODIS Web interface is started and DoIPVCI list is acquired in global_setup. "
            "This will run until the next 'odis_exit' API call. This is called in global_teardown")

    TESTSTEP("Getting Connection handle based on the IP and Project")
    EXPECTED("Connection handle for the Connected ECU acquired successfully")
    # For CAN/CANFD based connections, Project and Veh_info are mandatory
    con_handle = odis.get_connection_handle(project='PDX_Catalog_X070', veh_info="VINFO_AUE41CAN")

    TESTSTEP("Perform Boot Flashing")
    EXPECTED("Boot Flashing is successful")
    boot_path = 'D:\\DSUsers\\uic99077\\SWs\\ADC424\\X070_RC4\\FL_85E907428_X070_BLU_V001.odx'
    print(odis.execute_flash_programming(odx_path=boot_path, connection_handle=con_handle))
    app_path = 'D:\\DSUsers\\uic99077\\SWs\\ADC424\\X070_RC4\\FL_85E907428_X070_APP_V001.odx'
    print(odis.execute_flash_programming(odx_path=app_path, connection_handle=con_handle))


def SWT_ODIS_DATASET_TESTv1():
    DETAILS("This is an example test case to write data set using ODIS API when "
            "gateway (e.g. HCP5) is present")
    DETAILS("This test case is specific to VW ADC424 ECU")
    PRECONDITION("VW ADC424 ECU and gateway ECU (e.g. HCP5) to be connected properly and check "
                 "manually before running this test case")

    VERIFIES("ODIS dataset writing API when gateway (e.g. HCP5) is present")

    TESTTAG("HiL")

    TESTSTEP("Fetching ODIS Instance created in 'global_setup'")
    EXPECTED("ODIS class instance grabbed successfully")
    odis = get_parameter("odis_tool")

    DETAILS("Note: ODIS Web interface is started and DoIPVCI list is acquired in global_setup. "
            "This will run until the next 'odis_exit' API call. This is called in global_teardown")

    TESTSTEP("Getting Connection handle based on the IP and Project")
    EXPECTED("Connection handle for the Connected ECU acquired successfully")
    # For CAN/CANFD based connections, Project and Veh_info are mandatory.
    con_handle = odis.get_connection_handle(project='PDX_Catalog_X070', veh_info="VINFO_AUE41CAN")

    TESTSTEP("Perform dataset writing")
    EXPECTED("Dataset writing is successful")
    data_set = "D:\\DSUsers\\uic99077\\SWs\\ADC424\\DB_006C_7100_85E_0005_AU85E9074280_01AU4162EU" \
               ".zip"
    print(odis.data_set_download(connection_handle=con_handle, data_set=data_set))


def SWT_ODIS_RAW_SERVICE_TESTv1():
    DETAILS("This is an example test case to Read and write DID using ODIS API when gateway "
            "(e.g. HCP5) is present")
    DETAILS("This test case is specific to VW ADC424 ECU")
    PRECONDITION("VW ADC424 ECU and gateway ECU (e.g. HCP5) to be connected properly and check "
                 "manually before running this test case")

    VERIFIES("ODIS raw service API when gateway (e.g. HCP5) is present")

    TESTTAG("HiL")

    TESTSTEP("Fetching ODIS Instance created in 'global_setup'")
    EXPECTED("ODIS class instance grabbed successfully")
    odis = get_parameter("odis_tool")

    DETAILS("Note: ODIS Web interface is started and DoIPVCI list is acquired in global_setup. "
            "This will run until the next 'odis_exit' API call. This is called in global_teardown")

    TESTSTEP("Configuring Trace logs and starting trace recoding")
    EXPECTED("DOIP logs tracing Started")
    odis.config_trace(doip_trace=True, job_trace=False)
    odis.start_stop_trace(trace="ON")

    TESTSTEP("Getting Connection handle based on the IP and Project")
    EXPECTED("Connection handle for the Connected ECU acquired successfully")
    # For CAN/CANFD based connections, Project and Veh_info are mandatory
    con_handle = odis.get_connection_handle(project='PDX_Catalog_X070', veh_info="VINFO_AUE41CAN")

    TESTSTEP("Reading a DID(F1 91) using $22")
    EXPECTED("Positive response for $22 and Acquired data of F1 91")
    print(odis.send_raw_service(connection_handle=con_handle, req_data='22 F1 91'))

    TESTSTEP("Extended session(10 03)")
    EXPECTED("Positive response for 10 03")
    print(odis.send_raw_service(connection_handle=con_handle, req_data='10 03'))

    TESTSTEP("Writing a DID(06 00) using $2E")
    EXPECTED("Positive response for $2E")
    print(odis.send_raw_service(connection_handle=con_handle, req_data='2E 06 00 01 04 0A 00 00 '
                                                                       '00 00 00'))
    TESTSTEP("Stopping log tracing")
    EXPECTED("DOIP logs Tracing stopped")
    odis.start_stop_trace(trace="OFF")


def SWT_ODIS_VARIANT_CODING_TESTv1():
    DETAILS("This is an example test case to read and write variant coding when "
            "gateway (e.g. HCP5) is present")
    DETAILS("This test case is specific to VW ADC424 ECU")
    PRECONDITION("VW ADC424 ECU and gateway ECU (e.g. HCP5) to be connected properly and check "
                 "manually before running this test case")

    VERIFIES("ODIS Variant coding APIs when gateway (e.g. HCP5) is present")

    TESTTAG("HiL")

    TESTSTEP("Fetching ODIS Instance created in 'global_setup'")
    EXPECTED("ODIS class instance grabbed successfully")
    odis = get_parameter("odis_tool")

    DETAILS("Note: ODIS Web interface is started and DoIPVCI list is acquired in global_setup. "
            "This will run until the next 'odis_exit' API call. This is called in global_teardown")

    TESTSTEP("Getting Connection handle based on the IP and Project")
    EXPECTED("Connection handle for the Connected ECU acquired successfully")
    # For CAN/CANFD based connections, Project and Veh_info are mandatory
    con_handle = odis.get_connection_handle(project='PDX_Catalog_X070', veh_info="VINFO_AUE41CAN")

    TESTSTEP("Reading variant coding information")
    EXPECTED("Successfully read variant coding information")
    print(odis.read_variant_coding(connection_handle=con_handle))

    TESTSTEP("Write variant coding bytes")
    EXPECTED("Variant coding bytes written successfully")
    print(odis.write_variant_coding_bytes(connection_handle=con_handle,
                                          coding_values='01 04 0A 00 00 00 00 00'))
