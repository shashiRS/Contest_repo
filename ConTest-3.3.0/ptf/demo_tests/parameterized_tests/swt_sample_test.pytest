"""
    Copyright 2023 Continental Corporation

    :file: swt_sample_tests.pytest
    :platform: Windows, Linux
    :synopsis:
        Demo tests for parameterized decorated tests

    :author:
        - M. Shan Ur Rehman <Muhammad.Shan.ur.Rehman@continental-corporation.com>
"""

# standard Python import area


# ConTest or custom import area
# NOTE : ALWAYS IMPORT (contest_expects, contest_asserts, report and get_parameter) AS BELOW.
#        FOR PROPER DOCUMENTATION AND ERROR REPORTING
from contest_verify.verify import contest_asserts
from ptf.ptf_utils.report import *
from ptf.ptf_utils.parameterized import parameterized


@parameterized(
    params=[
        (1, "+", 2, 3),
        (2, "*", 2, 4),
        (4, "/", 2, 2),
        (1, "-", 2, -1)
    ],
    stop_on_first_failure=False,
    print_full_parameters=True,
    params_names=("add", "mul", "div", "sub")
)
def SWT_SIMPLE_CALCULATORv1(num_1, operator, num_2, expected_result):
    DETAILS("Generic test case to perform some basic calculations")
    PRECONDITION("Math knowledge")

    VERIFIES("Math")

    TESTTAG("calc")

    TESTSTEP("Evaluate the expression")
    EXPECTED("Evaluated value shall be equal to expected result")
    calculator_expression = f"{num_1} {operator} {num_2}"
    print(f"Calculating: {calculator_expression}")
    actual_result = eval(f"{calculator_expression}")
    contest_asserts.verify(
        actual_result,
        expected_result,
        f"Error in calculation\n\t"
        f"{calculator_expression} != {expected_result}")
    print(f"{calculator_expression} = {expected_result}")
