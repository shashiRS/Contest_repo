"""
    Copyright 2023 Continental Corporation

    :file: swt_sample_tests.pytest
    :platform: Windows, Linux
    :synopsis:
        Test script to demo the usecase of `get_current_test_info`

    :author:
        - M. Shan Ur Rehman <Muhammad.Shan.ur.Rehman@continental-corporation.com>
"""

# standard Python import area


# ConTest or custom import area
# NOTE : ALWAYS IMPORT (contest_expects, contest_asserts, contest_warn, report and get_parameter) AS BELOW.
#        FOR PROPER DOCUMENTATION AND ERROR REPORTING
from ptf.ptf_utils.decorator.prioritization import priority, Priority
from contest_verify.verify import contest_expects, contest_warn, contest_asserts
from ptf.ptf_utils.global_params import *
from ptf.ptf_utils.parameterized import parameterized
from ptf.ptf_utils.decorator.custom_setup import custom_setup
from ptf.ptf_utils.report import *


def SWT_NORMAL_TESTv1():
    DETAILS("Normal demo test")

    PRECONDITION("NA")

    VERIFIES("SWT_NORMAL_TEST_REQ_1")
    VERIFIES("SWT_NORMAL_TEST_REQ_2")

    AUTOMATES("SWT_NORMAL_TEST_ID")

    TESTTAG("normal")
    TESTTAG("sil")

    TESTSTEP("Get metadata")
    EXPECTED("Metadata fetched successfully")
    data = get_current_test_info()

    TESTSTEP("Verifying the metadata of the test case")
    EXPECTED("Metadata verified successfully")
    contest_asserts.verify(data.automates, ["SWT_NORMAL_TEST_ID"], "automates id data verification error")
    contest_asserts.verify(data.details, ["Normal demo test"], "details data verification error")
    contest_asserts.verify(data.name, "SWT_NORMAL_TESTv1", "test name data verification error")
    contest_asserts.verify(data.precondition, ["NA"], "precondition data verification error")
    contest_asserts.verify(data.tags, ["python", "normal", "sil"], "tags data verification error")
    contest_asserts.verify(data.verified_ids, ["SWT_NORMAL_TEST_REQ_1", "SWT_NORMAL_TEST_REQ_2"],
                           "verification id data verification error")
    print("TEST: All relevant metadata of current test is verified")


@custom_setup(setup="my_custom_setup", teardown="my_custom_teardown")
def SWT_CUSTOM_SETUPv1():
    DETAILS("A custom setup demo test")

    PRECONDITION("no_precondition")

    VERIFIES("CUSTOM_1")
    VERIFIES("CUSTOM_2")

    AUTOMATES("SWT_CUSTOM_SETUP_AUTO_ID")

    TESTTAG("custom")

    TESTSTEP("Get metadata")
    EXPECTED("Metadata fetched successfully")
    data = get_current_test_info()

    TESTSTEP("Verifying the metadata of the test case")
    EXPECTED("Metadata verified successfully")
    contest_asserts.verify(data.automates, ["SWT_CUSTOM_SETUP_AUTO_ID"], "automates id data verification error")
    contest_asserts.verify(data.details, ["A custom setup demo test"], "details data verification error")
    contest_asserts.verify(data.name, "SWT_CUSTOM_SETUPv1", "test name data verification error")
    contest_asserts.verify(data.precondition, ["no_precondition"], "precondition data verification error")
    contest_asserts.verify(data.tags, ["python", "custom"], "tags data verification error")
    contest_asserts.verify(data.verified_ids, ["CUSTOM_1", "CUSTOM_2"], "verification id data verification error")
    print("TEST: All relevant metadata of current test is verified")


@parameterized(
    params=[
        "British Longhair",
        "American Shorthair",
        "Scottish Fold",
    ],
    stop_on_first_failure=False,
    print_full_parameters=True,
    params_names=("british", "american", "scotish")
)
def SWT_CATS_BREEDS_HEALTHYv1(cat_breed):
    DETAILS("A parameterized demo test")

    PRECONDITION("no_precondition")

    VERIFIES("CATS_1")
    VERIFIES("CATS_100")

    AUTOMATES("SWT_CATS_BREEDS_HEALTHY_AUTO_ID")

    TESTTAG("cats")

    TESTSTEP("Printing different cat breeds")
    EXPECTED("Cat breeds printed")
    print("You might want to check '{}' cat breed online".format(cat_breed))
    print("TEST: cat breeds printed")

    TESTSTEP("Get metadata")
    EXPECTED("Metadata fetched successfully")
    data = get_current_test_info()

    TESTSTEP("Verifying the metadata of the test case")
    EXPECTED("Metadata verified successfully")
    contest_asserts.verify(data.automates, ["SWT_CATS_BREEDS_HEALTHY_AUTO_ID"], "automates id data verification error")
    contest_asserts.verify(data.details, ["A parameterized demo test"], "details data verification error")
    contest_asserts.verify(data.precondition, ["no_precondition"], "precondition data verification error")
    contest_asserts.verify(data.tags, ["python", "parameterized", "cats"], "tags data verification error")
    contest_asserts.verify(data.verified_ids, ["CATS_1", "CATS_100"], "verification id data verification error")
    print("TEST: All relevant metadata of current test is verified")
