"""
    Copyright 2023 Continental Corporation

    :file: swt_sample_test.pytest
    :platform: Windows
    :synopsis:
        This file contains sample test(s) for B+K Precision 1685B, 1687B, 1688B Power Supplies

    :author:
        - M. Shan Ur Rehman <Muhammad.Shan.ur.Rehman@continental-corporation.com>
"""


# standard Python import area


# ConTest or custom import area
# NOTE : ALWAYS IMPORT (contest_expects, contest_asserts, report and get_parameter) AS BELOW.
#        FOR PROPER DOCUMENTATION AND ERROR REPORTING
from contest_verify.verify import contest_asserts
from ptf.ptf_utils.report import *
from ptf.ptf_utils.global_params import get_parameter


def SWT_PSU_BK_READ_VALUESv1():
    DETAILS("Demo test to read power supply values from device")

    PRECONDITION("Ensure the power supply interface connected properly")

    VERIFIES("L3_SWT_PSU_BK_READ_VALUESv1")

    TESTTAG("hil")

    TESTCASE()

    TESTSTEP("Grabbing PSU variable created in global setup")
    EXPECTED("Variables grabbed")
    bk_psu = get_parameter("bk_psu")

    TESTSTEP("Get voltage setting value")
    EXPECTED("Voltage value fetched successfully")
    value = bk_psu.get_set_voltage()
    print("Set Voltage = ", value, " V")

    TESTSTEP("Get current setting value")
    EXPECTED("Current value fetched successfully")
    value = bk_psu.get_set_current()
    print("Set Current = ", value, " A")

    TESTSTEP("Get voltage display value")
    EXPECTED("Display value fetched successfully")
    value = bk_psu.get_display_voltage()
    print("Display Voltage = ", value, " V")

    TESTSTEP("Get current display value")
    EXPECTED("Display value fetched successfully")
    value = bk_psu.get_display_current()
    print("Display Current = ", value, " A")

    TESTSTEP("Get device status value")
    EXPECTED("Device status fetched successfully")
    value = bk_psu.get_device_status()
    print("Device Status is ", value)

    TESTSTEP("Get maximum voltage value")
    EXPECTED("Maximum voltage fetched successfully")
    value = bk_psu.get_max_voltage()
    print("Maximum Voltage = ", value, " V")

    TESTSTEP("Get maximum current value")
    EXPECTED("Maximum current fetched successfully")
    value = bk_psu.get_max_current()
    print("Maximum Current = ", value, " A")

    TESTSTEP("Get upper voltage limit value")
    EXPECTED("Upper voltage limit fetched successfully")
    value = bk_psu.get_voltage_limit()
    print("Upper voltage limit = ", value, " V")

    TESTSTEP("Get upper current limit value")
    EXPECTED("Upper current limit fetched successfully")
    value = bk_psu.get_current_limit()
    print("Upper current limit = ", value, " A")



def SWT_PSU_BK_SET_VOLTAGEv1():
    DETAILS("Demo test to read power supply values from device")

    PRECONDITION("Ensure the power supply interface connected properly")

    VERIFIES("L3_SWT_PSU_BK_READ_VALUESv1")

    TESTTAG("hil")

    TESTCASE()

    TESTSTEP("Grabbing PSU variable created in global setup")
    EXPECTED("Variables grabbed")
    bk_psu = get_parameter("bk_psu")

    TESTSTEP("Get voltage setting value")
    EXPECTED("Voltage value fetched successfully")
    set_volt_val_before = bk_psu.get_set_voltage()
    print("Voltage Before Setting = ", set_volt_val_before, " V")

    TESTSTEP("Set voltage to a new value")
    EXPECTED("Voltage set successfully")
    bk_psu.set_operating_voltage(12)

    TESTSTEP("Get voltage setting value after set previously")
    EXPECTED("Voltage value successfully changed to new value")
    set_volt_val_after = bk_psu.get_set_voltage()
    print("Voltage After Setting = ", set_volt_val_after, " V")
    contest_asserts.verify(set_volt_val_after, 12, "Value not set properly")


def SWT_PSU_BK_SET_CURRENTv1():
    DETAILS("Demo test to read power supply values from device")

    PRECONDITION("Ensure the power supply interface connected properly")

    VERIFIES("L3_SWT_PSU_BK_READ_VALUESv1")

    TESTTAG("hil")

    TESTCASE()

    TESTSTEP("Grabbing PSU variable created in global setup")
    EXPECTED("Variables grabbed")
    bk_psu = get_parameter("bk_psu")

    TESTSTEP("Get current setting value")
    EXPECTED("Current value fetched successfully")
    set_curr_val_before = bk_psu.get_set_current()
    print("Current Before Setting = ", set_curr_val_before, " A")

    TESTSTEP("Set current to a new value")
    EXPECTED("Current set successfully")
    bk_psu.set_operating_current(1.0)

    TESTSTEP("Get current setting value after set previously")
    EXPECTED("Current value successfully changed to new value")
    set_curr_val_after = bk_psu.get_set_current()
    print("Current After Setting = ", set_curr_val_after, " A")
    contest_asserts.verify(set_curr_val_after, 1.0, "Value not set properly")


def SWT_PSU_BK_SET_VOLTAGE_LIMITv1():
    DETAILS("Demo test to read power supply values from device")

    PRECONDITION("Ensure the power supply interface connected properly")

    VERIFIES("L3_SWT_PSU_BK_READ_VALUESv1")

    TESTTAG("hil")

    TESTCASE()

    TESTSTEP("Grabbing PSU variable created in global setup")
    EXPECTED("Variables grabbed")
    bk_psu = get_parameter("bk_psu")

    TESTSTEP("Get voltage limit value")
    EXPECTED("Voltage limit value fetched successfully")
    set_volt_lim_before = bk_psu.get_voltage_limit()
    print("Voltage Limit Before Setting = ", set_volt_lim_before, " V")

    TESTSTEP("Set voltage limit to a new value")
    EXPECTED("Voltage limit set successfully")
    bk_psu.set_voltage_limit(36.0)

    TESTSTEP("Get voltage limit value after set previously")
    EXPECTED("Voltage limit value successfully changed to new value")
    set_volt_lim_after = bk_psu.get_voltage_limit()
    print("Voltage Limit Before Setting = ", set_volt_lim_after, " V")
    contest_asserts.verify(set_volt_lim_after, 36.0, "Value not set properly")


def SWT_PSU_BK_SET_CURRENT_LIMITv1():
    DETAILS("Demo test to read power supply values from device")

    PRECONDITION("Ensure the power supply interface connected properly")

    VERIFIES("L3_SWT_PSU_BK_READ_VALUESv1")

    TESTTAG("hil")

    TESTCASE()

    TESTSTEP("Grabbing PSU variable created in global setup")
    EXPECTED("Variables grabbed")
    bk_psu = get_parameter("bk_psu")

    TESTSTEP("Get current limit value")
    EXPECTED("Current limit value fetched successfully")
    set_curr_lim_before = bk_psu.get_current_limit()
    print("Current Limit Before Setting = ", set_curr_lim_before, " A")

    TESTSTEP("Set current limit to a new value")
    EXPECTED("Current limit set successfully")
    bk_psu.set_current_limit(10.0)

    TESTSTEP("Get current limit value after set previously")
    EXPECTED("Current limit value successfully changed to new value")
    set_curr_lim_after = bk_psu.get_current_limit()
    print("Current Limit After Setting = ", set_curr_lim_after, " A")
    contest_asserts.verify(set_curr_lim_after, 10.0, "Value not set properly")
