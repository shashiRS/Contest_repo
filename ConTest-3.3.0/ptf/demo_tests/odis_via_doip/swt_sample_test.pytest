"""
    Copyright 2021 Continental Corporation

    :file: swt_sample_test.pytest
    :platform: Windows
    :synopsis:
        Demo tests for usage of ODIS tool APIs with DoIP/IP based connection.

    :author:
        - Ganga Prabhakar G <ganga.prabhakar.guntamukkala@continental-corporation.com>
"""

from ptf.ptf_utils.report import *
from ptf.ptf_utils.global_params import get_parameter


def SWT_ODIS_VERSION_TESTv1():
    DETAILS("This is an example test case to read ODIS versions")
    DETAILS("This test case doesn't need any HWs to be connected.")

    VERIFIES("ODIS version read API")

    TESTTAG("HiL")

    TESTSTEP("Fetching ODIS Instance created in 'global_setup'")
    EXPECTED("ODIS class instance grabbed successfully")
    odis = get_parameter("odis_tool")

    DETAILS("Note: ODIS Web interface is started and DoIPVCI list is acquired in global_setup. "
            "This will run until the next 'exit_odis' API call. This is called in global_teardown")

    TESTSTEP("Reading all ODIS versions")
    EXPECTED("ODIS versions read Successfully")
    print(odis.get_odis_versions())


def SWT_ODIS_GET_CON_HANDLE_WITH_VEH_INFO_TESTv1():
    DETAILS("This test case is specific to VW ADC424 ECU")
    DETAILS("This is an example test case to show the method to get connection handle using 'veh_info' parameter")
    DETAILS("This way of getting connection handle is helpful when multiple DoIP based interfaces are in 'veh_info'")

    PRECONDITION("VW ADC424 ECU to be connected & IP switcher has to run before running this test case")

    VERIFIES("ODIS read Identification API")

    TESTTAG("HiL")

    TESTSTEP("Fetching ODIS Instance created in 'global_setup'")
    EXPECTED("ODIS class instance grabbed successfully")
    odis = get_parameter("odis_tool")

    DETAILS("Note: ODIS Web interface is started and DoIPVCI list is acquired in global_setup. "
            "This will run until the next 'exit_odis' API call. This is called in global_teardown")

    TESTSTEP("Getting Connection handle based on the Project and ECU IP Address")
    EXPECTED("Connection handle for the Connected ECU acquired successfully")
    print(odis.get_connection_handle(project='PDX_Catalog_X070', ecu_ip="192.168.13.10", veh_info="VINFO_AUE41DoIP"))


def SWT_ODIS_READ_IDENTIFICATION_TESTv1():
    DETAILS("This is an example test case to read SPECIFIC IDENTIFICATION DATA using ODIS")
    DETAILS("This test case is specific to VW ADC424 ECU")
    PRECONDITION("VW ADC424 ECU to be connected & IP switcher has to run before running this test "
                 "case")

    VERIFIES("ODIS read Identification API")

    TESTTAG("HiL")

    TESTSTEP("Fetching ODIS Instance created in 'global_setup'")
    EXPECTED("ODIS class instance grabbed successfully")
    odis = get_parameter("odis_tool")

    DETAILS("Note: ODIS Web interface is started and DoIPVCI list is acquired in global_setup. "
            "This will run until the next 'exit_odis' API call. This is called in global_teardown")

    TESTSTEP("Getting Connection handle based on the Project and ECU IP Address")
    EXPECTED("Connection handle for the Connected ECU acquired successfully")
    con_handle = odis.get_connection_handle(project='PDX_Catalog_X070', ecu_ip="192.168.13.10")

    TESTSTEP("Read 'VW ECU Hardware Version Number'")
    EXPECTED("'VW ECU Hardware Version Number' read successfully")
    print(odis.read_identification_data_by_short_name(connection_handle=con_handle,
                                                      short_sub_name='',
                                                      ident_short_name='VW ECU Hardware Version '
                                                                       'Number'))


def SWT_ODIS_FLASHING_TESTv1():
    DETAILS("This is an example test case to perform flashing using ODIS Flashing API")
    DETAILS("This test case is specific to VW ADC424 ECU")
    PRECONDITION("VW ADC424 ECU to be connected & IP switcher has to run before running this test "
                 "case")

    VERIFIES("ODIS Flashing APIs")

    TESTTAG("HiL")

    TESTSTEP("Fetching ODIS Instance created in 'global_setup'")
    EXPECTED("ODIS class instance grabbed successfully")
    odis = get_parameter("odis_tool")

    DETAILS("Note: ODIS Web interface is started and DoIPVCI list is acquired in global_setup. "
            "This will run until the next 'odis_exit' API call. This is called in global_teardown")

    TESTSTEP("Getting Connection handle based on the IP and Project")
    EXPECTED("Connection handle for the Connected ECU acquired successfully")
    con_handle = odis.get_connection_handle(project='PDX_Catalog_X070', ecu_ip="192.168.13.10")

    TESTSTEP("Perform Boot Flashing")
    EXPECTED("Boot Flashing is successful")
    boot_path = 'D:\\DSUsers\\uic99077\\SWs\\ADC424\\X070_RC4\\FL_85E907428_X070_BLU_V001.odx'
    print(odis.execute_flash_programming(odx_path=boot_path, connection_handle=con_handle))
    app_path = 'D:\\DSUsers\\uic99077\\SWs\\ADC424\\X070_RC4\\FL_85E907428_X070_APP_V001.odx'
    print(odis.execute_flash_programming(odx_path=app_path, connection_handle=con_handle))


def SWT_ODIS_DATASET_TESTv1():
    DETAILS("This is an example test case to write data set using ODIS API")
    DETAILS("This test case is specific to VW ADC424 ECU")
    PRECONDITION("VW ADC424 ECU to be connected & IP switcher has to run before running this test "
                 "case")

    VERIFIES("ODIS dataset writing API")

    TESTTAG("HiL")

    TESTSTEP("Fetching ODIS Instance created in 'global_setup'")
    EXPECTED("ODIS class instance grabbed successfully")
    odis = get_parameter("odis_tool")

    DETAILS("Note: ODIS Web interface is started and DoIPVCI list is acquired in global_setup. "
            "This will run until the next 'odis_exit' API call. This is called in global_teardown")

    TESTSTEP("Getting Connection handle based on the IP and Project")
    EXPECTED("Connection handle for the Connected ECU acquired successfully")
    con_handle = odis.get_connection_handle(project='PDX_Catalog_X070', ecu_ip="192.168.13.10")

    TESTSTEP("Perform dataset writing")
    EXPECTED("Dataset writing is successful")
    data_set = "D:\\DSUsers\\uic99077\\SWs\\ADC424\\DB_006C_7100_85E_0005_AU85E9074280_01AU4162EU" \
               ".zip"
    print(odis.data_set_download(connection_handle=con_handle, data_set=data_set))


def SWT_ODIS_RAW_SERVICE_TESTv1():
    DETAILS("This is an example test case to Read and write DID using ODIS API")
    DETAILS("This test case is specific to VW ADC424 ECU")
    PRECONDITION("VW ADC424 ECU to be connected & IP switcher has to run before running this test "
                 "case")

    VERIFIES("ODIS raw service API")

    TESTTAG("HiL")

    TESTSTEP("Fetching ODIS Instance created in 'global_setup'")
    EXPECTED("ODIS class instance grabbed successfully")
    odis = get_parameter("odis_tool")

    DETAILS("Note: ODIS Web interface is started and DoIPVCI list is acquired in global_setup. "
            "This will run until the next 'odis_exit' API call. This is called in global_teardown")

    TESTSTEP("Configuring Trace logs and starting trace recoding")
    EXPECTED("DOIP logs tracing Started")
    odis.config_trace(doip_trace=True, job_trace=False)
    odis.start_stop_trace(trace="ON")

    TESTSTEP("Getting Connection handle based on the IP and Project")
    EXPECTED("Connection handle for the Connected ECU acquired successfully")
    con_handle = odis.get_connection_handle(project='PDX_Catalog_X070', ecu_ip="192.168.13.10")

    TESTSTEP("Reading a DID(F1 91) using $22")
    EXPECTED("Positive response for $22 and Acquired data of F1 91")
    print(odis.send_raw_service(connection_handle=con_handle, req_data='22 F1 91'))

    TESTSTEP("Extended session(10 03)")
    EXPECTED("Positive response for 10 03")
    print(odis.send_raw_service(connection_handle=con_handle, req_data='10 03'))

    TESTSTEP("Writing a DID(06 00) using $2E")
    EXPECTED("Positive response for $2E")
    print(odis.send_raw_service(connection_handle=con_handle, req_data='2E 06 00 01 04 0A 00 00 '
                                                                       '00 00 00'))
    TESTSTEP("Stopping log tracing")
    EXPECTED("DOIP logs Tracing stopped")
    odis.start_stop_trace(trace="OFF")


def SWT_ODIS_VARIANT_CODING_TESTv1():
    DETAILS("This is an example test case to read and write variant coding")
    DETAILS("This test case is specific to VW ADC424 ECU")
    PRECONDITION("VW ADC424 ECU to be connected & IP switcher has to run before running this test "
                 "case")

    VERIFIES("ODIS Variant coding APIs")

    TESTTAG("HiL")

    TESTSTEP("Fetching ODIS Instance created in 'global_setup'")
    EXPECTED("ODIS class instance grabbed successfully")
    odis = get_parameter("odis_tool")

    DETAILS("Note: ODIS Web interface is started and DoIPVCI list is acquired in global_setup. "
            "This will run until the next 'odis_exit' API call. This is called in global_teardown")

    TESTSTEP("Getting Connection handle based on the IP and Project")
    EXPECTED("Connection handle for the Connected ECU acquired successfully")
    con_handle = odis.get_connection_handle(project='PDX_Catalog_X070', ecu_ip="192.168.13.10")

    TESTSTEP("Reading variant coding information")
    EXPECTED("Successfully read variant coding information")
    print(odis.read_variant_coding(connection_handle=con_handle))

    TESTSTEP("Write variant coding bytes")
    EXPECTED("Variant coding bytes written successfully")
    print(odis.write_variant_coding_bytes(connection_handle=con_handle,
                                          coding_values='01 04 0A 00 00 00 00 00'))

def SWT_ODIS_SEND_RAW_SERVICE_FUNCTIONAL_TESTv1():
    DETAILS("This is an example test case to send functional diag request")
    DETAILS("This test case is specific to HCP2 project ECU")
    PRECONDITION("Ensure proper setup before running this test case")

    VERIFIES("ODIS send_raw_service_functional API")

    TESTTAG("HiL")

    TESTSTEP("Fetching ODIS Instance created in 'global_setup'")
    EXPECTED("ODIS class instance grabbed successfully")
    odis = get_parameter("odis_tool")

    DETAILS("Note: ODIS Web interface is started and DoIPVCI list is acquired in global_setup. "
            "This will run until the next 'exit_odis' API call. This is called in global_teardown")

    TESTSTEP("Getting Connection handle based on the Project and ECU IP Address")
    EXPECTED("Connection handle for the Connected ECU acquired successfully")
    odis.get_connection_handle(project='X220-HCP5-patched-doip', ecu_ip='192.168.13.69')
    TESTSTEP("Read 'Current diagnostic session'")
    EXPECTED("'Current diagnostic session' read successfully")
    # How to fetch the functional group string is explained in the doc string/ contest documentation
    print(odis.send_raw_service_functional(functional_group="AllUDSSyste", req_data='22 F1 86'))

