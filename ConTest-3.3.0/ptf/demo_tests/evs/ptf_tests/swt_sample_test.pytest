"""
    Copyright 2019 Continental Corporation

    AUTOGENERATED FILE

    :file: swt_sample_test.pytest
    :platform: Windows
    :synopsis:
        File containing initial/preliminary/example tests for EVS project

    :author:
        - M. Shan Ur Rehman <Muhammad.Shan.ur.Rehman@continental-corporation.com>
"""


# standard Python import area
import time

# ConTest or custom import area
# NOTE : ALWAYS IMPORT (contest_expects, contest_asserts, report and get_parameter) AS BELOW.
#        FOR PROPER DOCUMENTATION AND ERROR REPORTING
from contest_verify.verify import contest_asserts
from contest_verify.verify import contest_expects
from ptf.ptf_utils.report import DETAILS, PRECONDITION, VERIFIES, TESTTAG, TESTSTEP, EXPECTED, TESTCASE
from ptf.ptf_utils.global_params import get_parameter
import goepel_can_tp
import evs_commands
import evs_support


def SWT_EVS_READ_AURIX_SW_VERSIONv1():
    DETAILS("Test for reading back AURIX core SW version number.")
    DETAILS("")
    DETAILS("SW version will be read in an asynchronous manner.")
    PRECONDITION("Fill in precondition")

    VERIFIES("L3_EVS_READ_AURIX_SW_VERSION")

    TESTTAG("hil")

    TESTSTEP("Creating object of 'GoepelCanTP' class")
    EXPECTED("Object created successfully")
    g_can_tp = goepel_can_tp.GoepelCanTp()

    TESTSTEP("Creating a response handler object to get CAN response data")
    EXPECTED("Object created successfully")
    response = evs_support.ResponseHandler()

    DETAILS("Steps 1, 2 and 3 can be moved out of test case and handled by framework itself ")
    DETAILS("in order to avoid writing these steps everytime in tests.")
    DETAILS("But this needs discussion with EVS stake holder(s).")

    TESTSTEP("1. Opening interface and setting baud-rate")
    EXPECTED("Interface 'CAN1' shall be opened and baud-rate set to 500000 Baud")
    g_can_tp.init_interface(interface_name="CAN1", baud_rate=500000)

    TESTSTEP("2. Configuring ISP-TP parameters with required source and target IDs")
    EXPECTED("ISO-TP configured successfully with required parameters")
    g_can_tp.configure_iso_tp(phy_src_id=0x3E, phy_trg_id=0x3C1)

    TESTSTEP("Registering a callback function to handle response from ECU or target")
    EXPECTED("Callback function registered successfully")
    g_can_tp.register_message_callback(response.callback_func)

    TESTSTEP("Sending command for reading AURIX core SW version number")
    EXPECTED("AURIX core SW version read command sent successfully")
    g_can_tp.send_message(evs_commands.AURIX_SW_VERSION)

    TESTSTEP("Waiting for 1 sec for response to be received by HW ")
    EXPECTED("Delay of 1 sec without any error")
    time.sleep(1)

    TESTSTEP("Fetching the response from response handler's FIFO buffer")
    EXPECTED("Last item of FIFO buffer poped-out successfully")
    rcvd_data = response.fetch()
    print(rcvd_data)

    TESTSTEP("3. Closing communication interface")
    EXPECTED("Interface closed successfully")
    g_can_tp.close_interface()


def SWT_EVS_READ_RH850_SW_VERSIONv1():
    DETAILS("Test for reading back RH850 core SW version number.")
    DETAILS("")
    DETAILS("SW version will be read in an asynchronous manner.")
    PRECONDITION("Fill in precondition")

    VERIFIES("L3_EVS_READ_RH850_SW_VERSION")

    TESTTAG("hil")

    TESTSTEP("Creating object of 'GoepelCanTP' class")
    EXPECTED("Object created successfully")
    g_can_tp = goepel_can_tp.GoepelCanTp()

    TESTSTEP("Creating a response handler object to get CAN response data")
    EXPECTED("Object created successfully")
    response = evs_support.ResponseHandler()

    DETAILS("Steps 1, 2 and 3 can be moved out of test case and handled by framework itself ")
    DETAILS("in order to avoid writing these steps everytime in tests.")
    DETAILS("But this needs discussion with EVS stake holder(s).")

    TESTSTEP("1. Opening interface and setting baud-rate")
    EXPECTED("Interface 'CAN1' shall be opened and baud-rate set to 500000 Baud")
    g_can_tp.init_interface(interface_name="CAN1", baud_rate=500000)

    TESTSTEP("2. Configuring ISP-TP parameters with required source and target IDs")
    EXPECTED("ISO-TP configured successfully with required parameters")
    g_can_tp.configure_iso_tp(phy_src_id=0x3E, phy_trg_id=0x3C1)

    TESTSTEP("Registering a callback function to handle response from ECU or target")
    EXPECTED("Callback function registered successfully")
    g_can_tp.register_message_callback(response.callback_func)

    TESTSTEP("Sending command for reading AURIX core SW version number")
    EXPECTED("AURIX core SW version read command sent successfully")
    g_can_tp.send_message(evs_commands.RH850_SW_VERSION)

    TESTSTEP("Waiting for 1 sec for response to be received by HW ")
    EXPECTED("Delay of 1 sec without any error")
    time.sleep(1)

    TESTSTEP("Fetching the response from response handler's FIFO buffer")
    EXPECTED("Last item of FIFO buffer poped-out successfully")
    rcvd_data = response.fetch()
    print(rcvd_data)

    TESTSTEP("Removing the callback function")
    EXPECTED("Call back removed successfully")
    g_can_tp.remove_message_callback()

    TESTSTEP("3. Closing communication interface")
    EXPECTED("Interface closed successfully")
    g_can_tp.close_interface()


def SWT_GOEPEL_BOX_CAN_LOOP_TESTv1():
    DETAILS("Loop test of CAN-TP communication")
    DETAILS("")
    DETAILS("HW Pre-requisites: CAN1 and CAN2 ports should be connected")
    PRECONDITION("Fill in precondition")

    VERIFIES("L3_EVS_CAN_READ_GOEPEL_BOX")

    TESTTAG("hil")

    TESTSTEP("Creating first object of 'GoepelCanTP' class")
    EXPECTED("Object created successfully")
    g_can_tp_1 = goepel_can_tp.GoepelCanTp()

    TESTSTEP("Creating second object of 'GoepelCanTP' class")
    EXPECTED("Object created successfully")
    g_can_tp_2 = goepel_can_tp.GoepelCanTp()

    TESTSTEP("Initializing first CAN interface and setting baud-rate")
    EXPECTED("Interface 'CAN1' shall be opened and baud-rate set to 500000 Baud")
    g_can_tp_1.init_interface(interface_name="CAN1", baud_rate=500000)

    TESTSTEP("Initializing second CAN interface and setting baud-rate")
    EXPECTED("Interface 'CAN2' shall be opened and baud-rate set to 500000 Baud")
    g_can_tp_2.init_interface(interface_name="CAN2", baud_rate=500000)

    TESTSTEP("Creating a response handler object to get CAN response data")
    EXPECTED("Object created successfully")
    response = evs_support.ResponseHandler()

    TESTSTEP("Configuring CAN1 ISP-TP parameters with required source and target IDs")
    EXPECTED("ISO-TP configured successfully with required parameters")
    g_can_tp_1.configure_iso_tp(phy_src_id=0x3E, phy_trg_id=0x3C1)

    TESTSTEP("Configuring CAN2 ISP-TP parameters with required source and target IDs")
    EXPECTED("ISO-TP configured successfully with required parameters")
    g_can_tp_2.configure_iso_tp(phy_src_id=0x3C1, phy_trg_id=0x3E)

    TESTSTEP("Registering a callback function at CAN2 to handle response from CAN1")
    EXPECTED("Callback function registered successfully")
    g_can_tp_2.register_message_callback(response.callback_func)

    TESTSTEP("Sending five bytes of data over CAN1")
    EXPECTED("Data sent successfully over CAN1")
    g_can_tp_1.send_message(bytes([0x01, 0x02, 0x03, 0x04, 0x05]))

    TESTSTEP("100 msec wait!")
    EXPECTED("Delay of 100 msec")
    time.sleep(0.01)

    TESTSTEP("Sending another five bytes of data over CAN1")
    EXPECTED("Data sent successfully over CAN1")
    g_can_tp_1.send_message(bytes([0x06, 0x07, 0x08, 0x09, 0x10]))

    TESTSTEP("100 msec wait!")
    EXPECTED("Delay of 100 msec")
    time.sleep(0.01)

    TESTSTEP("Fetching the response from response handler's FIFO buffer")
    EXPECTED("Last item of FIFO buffer poped-out successfully")
    response_1 = response.fetch()

    TESTSTEP("Fetching the response from response handler's FIFO buffer")
    EXPECTED("Last item of FIFO buffer poped-out successfully")
    response_2 = response.fetch()

    TESTSTEP("Check weather sent data and received data are equal or not")
    EXPECTED("Sent and received data is same.")
    # response_1 is 256 bytes long that's why comparing first
    # five items only (tester can change this accordingly).
    contest_expects.expect_eq(response_1[:5], bytes([0x01, 0x02, 0x03, 0x04, 0x05]),
                          "Sent and received data is not same, loop test failed")

    TESTSTEP("Check weather sent data and received data are equal or not")
    EXPECTED("Sent and received data is same.")
    # response_2 is 256 bytes long that's why comparing first
    # five items only (tester can change this accordingly).
    contest_expects.expect_eq(response_2[:5], bytes([0x06, 0x07, 0x08, 0x09, 0x10]),
                          "Sent and received data is not same, loop test failed")

    TESTSTEP("Removing the callback function from CAN2")
    EXPECTED("Call back removed successfully")
    g_can_tp_2.remove_message_callback()

    TESTSTEP("Closing CAN1 communication interface")
    EXPECTED("Interface closed successfully")
    g_can_tp_1.close_interface()

    TESTSTEP("Closing CAN2 communication interface")
    EXPECTED("Interface closed successfully")
    g_can_tp_2.close_interface()
