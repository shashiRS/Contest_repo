"""
    Copyright 2022 Continental Corporation

    :file: swt_canoe_diag_with_param.pytest
    :platform: Windows
    :synopsis:
        File containing demo test(s) for CANoe `send_diag_cmd_via_id` API

    :author:
        - M. Shan Ur Rehman <Muhammad.Shan.ur.Rehman@continental-corporation.com>
"""



from ptf.ptf_utils.report import *
from ptf.ptf_utils.global_params import get_parameter


def SWT_DOOR_STATUS_CTRL_RD_WRv1():
    DETAILS("Example test case for sending 'Door_Status_Control' Diag ID")
    DETAILS("In this requested ID parameters shall be set and also fetched in response")
    DETAILS("NOTE: This test is based on CANoe 'UDSBasic.cfg' configuration")

    PRECONDITION("CANoe 'UDSBasic.cfg' configuration working")

    VERIFIES("L3_SW_DOOR_STATUS_CTRL_RD_WR")

    TESTTAG("hil")

    TESTSTEP("Grabbing CANoe variables created in global setup")
    EXPECTED("Variables grabbed")
    canoe = get_parameter("canoe")

    TESTSTEP("Sending 'Door_Status_Control' Diag ID with set parameters")
    TESTSTEP("Also requesting to get parameters of Diag ID in its response")
    EXPECTED("Diag ID sent successfully and all parameters are set and fetched properly")
    resp = canoe.send_diag_cmd_via_id(
        diag_cmd_id="Door_Status_Control",
        diag_node="Door",
        set_params={
            "Door_Contact.Door_contact_front_left": "open",
            "Door_Contact.Door_contact_front_right": "closed",
            "Door_Contact.Door_contact_rear_left": "open",
            "Door_Contact.Door_contact_rear_right": "open"
        },
        get_params=[
            "Door_Contact.Door_contact_front_left",
            "Door_Contact.Door_contact_front_right",
            "Door_Contact.Door_contact_rear_left",
            "Door_Contact.Door_contact_rear_right"
        ],
        params_set_verify=True
    )
    print("Door_Status_Control Rx: ", resp)

    TESTSTEP("Printing all parameters as read in Diag ID response")
    EXPECTED("Printing done successfully")
    for param, value in resp[1].items():
        print(param, " = ", value)


def SWT_VARIANT_CODING_WRITEv1():
    DETAILS("Example test case for sending 'Variant_Coding_Write' Diag ID")
    DETAILS("In this requested ID parameters shall be set")
    DETAILS("NOTE: This test is based on CANoe 'UDSBasic.cfg' configuration")

    PRECONDITION("CANoe 'UDSBasic.cfg' configuration working")

    VERIFIES("L3_SW_VARIANT_CODING_WRITE")

    TESTTAG("hil")

    TESTSTEP("Grabbing CANoe variables created in global setup")
    EXPECTED("Variables grabbed")
    canoe = get_parameter("canoe")

    TESTSTEP("Sending 'Variant_Coding_Write' Diag ID with set parameters")
    EXPECTED("Diag ID sent successfully and all parameters are set properly")
    resp = canoe.send_diag_cmd_via_id(
        diag_cmd_id="Variant_Coding_Write",
        diag_node="Door",
        set_params={
            "Codingstring.CountryType": "Europe",
            "Codingstring.VehicleSpeedToLockDoor": "50",
            "Codingstring.VehicleType": "Sedan",
            "Codingstring.WindowLift_Support": "on"
        },
        params_set_verify=True
    )
    print("Variant_Coding_Write Rx: ", resp)


def SWT_DOOR_STATUS_CTRL_RDv1():
    DETAILS("Example test case for sending 'Door_Status_Read' Diag ID")
    DETAILS("In this requested ID parameters shall be read")
    DETAILS("NOTE: This test is based on CANoe 'UDSBasic.cfg' configuration")

    PRECONDITION("CANoe 'UDSBasic.cfg' configuration working")

    VERIFIES("L3_SW_DOOR_STATUS_CTRL_RD")

    TESTTAG("hil")

    TESTSTEP("Grabbing CANoe variables created in global setup")
    EXPECTED("Variables grabbed")
    canoe = get_parameter("canoe")

    TESTSTEP("Sending 'Door_Status_Read' Diag ID with set parameters")
    EXPECTED("Diag ID sent successfully and all parameters are read properly")
    resp = canoe.send_diag_cmd_via_id(
        diag_cmd_id="Door_Status_Read",
        diag_node="Door",
        get_params=[
            "Door_Contact.Door_contact_front_left",
            "Door_Contact.Door_contact_front_right",
            "Door_Contact.Door_contact_rear_left",
            "Door_Contact.Door_contact_rear_right"
        ]
    )
    print("Door_Status_Read Rx: ", resp)

    TESTSTEP("Printing all parameters as read in Diag ID response")
    EXPECTED("Printing done successfully")
    for param, value in resp[1].items():
        print(param, " = ", value)


def SWT_FAULT_MEMORY_READ_NUMBERv1():
    DETAILS("Example test case for sending 'FaultMemory_ReadNumber' Diag ID")
    DETAILS("In this requested ID parameters shall be set and also fetched in response")
    DETAILS("NOTE: This test is based on CANoe 'UDSBasic.cfg' configuration")

    PRECONDITION("CANoe 'UDSBasic.cfg' configuration working")

    VERIFIES("L3_SW_FAULT_MEMORY_READ_NUMBER")

    TESTTAG("hil")

    TESTSTEP("Grabbing CANoe variables created in global setup")
    EXPECTED("Variables grabbed")
    canoe = get_parameter("canoe")

    TESTSTEP("Sending 'FaultMemory_ReadNumber' Diag ID with set parameters")
    TESTSTEP("Also requesting to get parameters of Diag ID in its response")
    EXPECTED("Diag ID sent successfully and all parameters are set and fetched properly")
    resp = canoe.send_diag_cmd_via_id(
        diag_cmd_id="FaultMemory_ReadNumber",
        diag_node="Door",
        set_params={
            "DTCStatusMask.TestFailed": "true",
            "DTCStatusMask.TestFailedSinceLastClear": "true",
            "DTCStatusMask.WarningIndicatorRequested": 0x01,
            "DTCStatusMask.PendingDtc": 0x01
        },
        get_params=[
            "DTCStatusAvailabilityMask.TestFailed",
            "DTCStatusAvailabilityMask.TestFailedSinceLastClear",
            "DTCStatusAvailabilityMask.WarningIndicatorRequested",
            "DTCStatusAvailabilityMask.PendingDtc",
            "DTCCount",
            "DtcFormatIdentifier",
            "ReportNumberOfDtcByStatusMask"
        ]
    )
    print("FaultMemory_ReadNumber Rx: ", resp)

    TESTSTEP("Printing all parameters as read in Diag ID response")
    EXPECTED("Printing done successfully")
    for param, value in resp[1].items():
        print(param, " = ", value)
