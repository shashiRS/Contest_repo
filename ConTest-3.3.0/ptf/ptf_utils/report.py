"""
    Copyright Continental Corporation and subsidiaries. All rights reserved.

    :platform: Windows, Linux

    :synopsis:
        The functions in this file allow the user to add details to their testcase reports. With these
        functions, you can add e.g. tags, ids of verified requirements and test step description. This
        information will be later used in different reporting, e.g. for html and json reports.
"""

# disabling import error as they are installed at start of framework
# pylint: disable=import-error
import os
from datetime import datetime
import logging
import re

# This will be set in .watcher.test_watcher.TestCaseInfo.__init__ for every new test case
from contest_verify.verify import contest_asserts
from ptf.ptf_utils.test_watcher import CURRENT_TESTCASE
from ptf.ptf_utils import common


# pylint: disable=invalid-name
# We define several functions to be used within the testcases. For easier visibility, they won't fit
# the default function name pattern.

# depending on the browser the below formats are supported for html 'img' tag
supported_image_formats = [".gif", ".jpg", ".jpeg", ".svg", ".png", ".bmp"]


def DETAILS(detail):
    """
    Function for adding test detail data

    :param: str detail: Description of test case
    """
    CURRENT_TESTCASE[0].details.append(detail)


def TESTCASE():
    """
    Function just for doxygen comment
    """
    # pylint: disable=unnecessary-pass
    pass


def TESTSTEP(step):
    """
    Function for adding test step details

    :param str step: Description of test step
    """
    timestamp = datetime.now().strftime("%H:%M:%S.%f")
    print("\n\n[TESTSTEP-" + timestamp + "]", step)
    CURRENT_TESTCASE[0].steps.append(" Test Step-" + timestamp + ": " + step)


def EXPECTED(expect):
    """
    Function for adding test step expected data

    :param str expect: Description of expected result
    """
    timestamp = datetime.now().strftime("%H:%M:%S.%f")
    print("[EXPECTED-" + timestamp + "]", expect)
    CURRENT_TESTCASE[0].steps.append(" Expected-" + timestamp + ": " + expect)


def VERIFIES(requirement):
    """
    Function for verified requirement reporting

    .. note::
        Requirement IDs via ``VERIFIES`` must not be parametrized in parametrized test cases.
        Requirement IDs shall be given as string literals always.

    :param str requirement: Requirement name/ID
    """
    if not requirement:
        raise ValueError("Cannot add empty requirement")
    if requirement not in CURRENT_TESTCASE[0].verified_ids:
        CURRENT_TESTCASE[0].verified_ids.append(requirement)


def TESTTAG(tag):
    """
    Function for test tag reporting

    :param str tag: Test methods and intended usage of test cases
    """
    if not tag:
        raise ValueError("Cannot add empty tag")
    if tag not in CURRENT_TESTCASE[0].tags:
        CURRENT_TESTCASE[0].tags.append(tag)


def AUTOMATES(test_script_id):
    """
    Function for adding test id for ETM tool

    :param str test_script_id: The autogenerated integer ID of a test script artifact in ETM
    """
    if test_script_id not in CURRENT_TESTCASE[0].automates:
        CURRENT_TESTCASE[0].automates.append(test_script_id)


def PRECONDITION(precondition):
    """
    Function for adding precondition

    :param str precondition: Description of precondition
    """
    CURRENT_TESTCASE[0].precondition.append(precondition)


def _CANOE_REPORT(step, report_file):
    """
    Internal function to add CANoe reports at exact execution test step.

    :param str step: to add test step about CANoe executed test config/module info
    :param str report_file: contains full path of CANoe generated report
    """
    TESTSTEP(step)
    LINK(report_file)


def IMAGE(image):
    """
    Function for adding image details in  Test Case Execution Sequence

    :param str image: path to the image
    """

    if not os.path.exists(image):
        contest_asserts.fail(f"File does not exist: {image}")

    img_ext = os.path.splitext(image)[1]
    if img_ext in supported_image_formats:
        timestamp = datetime.now().strftime("%H:%M:%S.%f")
        print("\n\n[Image-" + timestamp + "]", image)
        src_path, _ = common.get_updated_file_path(image, CURRENT_TESTCASE[0])
        # pylint: disable=consider-using-f-string
        image_display = "<img src={} alt= {} style={}>".format(
            src_path, "user provided image", "object-fit:cover;width:500px;height:auto"
        )
        # adding image as hyperlink
        LINK(image)
        CURRENT_TESTCASE[0].steps.append((" Image-" + timestamp + ": " + image_display))
    else:
        contest_asserts.fail(
            f"Image file format not supported: {image} \n Supported Formats are: {supported_image_formats}"
        )


def LINK(path_to_file):
    """
    Function for hyperlinking any files in Test Case Execution Sequence for easy navigation.

    :param str path_to_file: path to the file needs to be hyperlinked
    """
    if not os.path.exists(path_to_file):
        contest_asserts.fail(f"File does not exist: {path_to_file}")
    timestamp = datetime.now().strftime("%H:%M:%S.%f")
    href_path, base_file_name = common.get_updated_file_path(path_to_file, CURRENT_TESTCASE[0])
    link = f"<a href={href_path} title='Original Path: {path_to_file}'>{base_file_name}</a>"
    CURRENT_TESTCASE[0].steps.append(" Link-" + timestamp + ": " + link)


def REVIEW_ID(review_id):
    """
    This macro adds a review ID to a test case
    .. note::
        Only alphanumerical content plus - & _ is allowed (no blanks or special characters) as input
    :param str review_id: Review tool ID
    """
    # compile accepted content in 'review_id' string
    pattern = re.compile("^[a-zA-Z0-9_-]+$")
    # check if given "review_id" string content is valid
    if pattern.search(review_id):
        # CURRENT_TESTCASE[0].review_id = review_id
        pass
    else:
        # In case of invalid content detected in string
        invalid_content = re.findall("[^a-zA-Z0-9_-]", review_id)
        logging.warning(
            "Invalid character(s) %s detected in REVIEW_ID '%s' string.", str(invalid_content)[1:-1], review_id
        )
